To propagate measurement uncertainties through PyWake and generate Sobol sensitivity indices for the effective wind speed (WS_eff), follow this script. It uses the Saltelli sampling method to assess the impact of wind speed (ws), wind direction (wd), and turbulence intensity (TI) uncertainties on the flow field.

```python
import numpy as np
import matplotlib.pyplot as plt
from SALib.sample import saltelli
from SALib.analyze import sobol
from py_wake.examples.data.iea37 import IEA37Site, IEA37_WindTurbines
from py_wake.literature.gaussian_models import Bastankhah_PorteAgel_2014
from py_wake import HorizontalGrid
import multiprocessing as mp
from tqdm import tqdm

# Setup nominal model
site = IEA37Site(16)
x, y = site.initial_position.T
wind_turbines = IEA37_WindTurbines()
wf_model = Bastankhah_PorteAgel_2014(site, wind_turbines, k=0.0324555)
grid = HorizontalGrid(resolution=100, extend=0.2)  # Coarse grid for efficiency

# Define Sobol problem parameters and ranges
problem = {
    'num_vars': 3,
    'names': ['ws', 'wd', 'TI'],
    'bounds': [[8.0, 12.0],      # Wind speed (m/s)
               [265.0, 275.0],  # Wind direction (degrees)
               [0.08, 0.12]]    # Turbulence intensity
}

# Generate Saltelli samples (reduce N for faster testing)
N = 100  # Base sample count
samples = saltelli.sample(problem, N, calc_second_order=False)
num_samples = samples.shape[0]

def run_simulation(params):
    """Run PyWake simulation for given parameters and return WS_eff grid."""
    ws, wd, ti = params
    try:
        sim_res = wf_model(x, y, wd=wd, ws=ws, TI=ti)
        flow_map = sim_res.flow_map(grid=grid)
        return flow_map.WS_eff.values
    except Exception as e:
        print(f"Error with params {params}: {e}")
        return np.full((grid.resolution, grid.resolution), np.nan)

if __name__ == '__main__':
    # Parallel execution of simulations
    with mp.Pool(processes=mp.cpu_count()) as pool:
        outputs = list(tqdm(pool.imap(run_simulation, samples), total=num_samples))
    outputs = np.array(outputs)
    
    # Reshape outputs for Sobol analysis
    output_shape = outputs.shape[1:]
    outputs_flat = outputs.reshape(num_samples, -1)

    # Compute Sobol indices for each grid point
    sobol_results = []
    for i in tqdm(range(outputs_flat.shape[1])):
        Y = outputs_flat[:, i]
        if np.isnan(Y).any():
            sobol_results.append({'S1': [np.nan]*3, 'ST': [np.nan]*3})
            continue
        Si = sobol.analyze(problem, Y, calc_second_order=False)
        sobol_results.append({'S1': Si['S1'], 'ST': Si['ST']})

    # Reshape results to grid
    param_names = problem['names']
    S1 = {name: np.zeros(output_shape) for name in param_names}
    ST = {name: np.zeros(output_shape) for name in param_names}
    for idx, res in enumerate(sobol_results):
        i, j = np.unravel_index(idx, output_shape)
        for k, name in enumerate(param_names):
            S1[name][i, j] = res['S1'][k]
            ST[name][i, j] = res['ST'][k]

    # Plot and save sensitivity maps
    def plot_map(data, title, filename):
        plt.figure(figsize=(10, 8))
        plt.imshow(data, origin='lower', extent=[grid.x.min(), grid.x.max(), grid.y.min(), grid.y.max()])
        plt.colorbar(label='Sobol Index')
        plt.xlabel('x [m]')
        plt.ylabel('y [m]')
        plt.title(title)
        plt.savefig(filename)
        plt.close()

    for name in param_names:
        plot_map(S1[name], f'First-Order Sensitivity ({name})', f'S1_{name}.png')
        plot_map(ST[name], f'Total-Order Sensitivity ({name})', f'ST_{name}.png')
```

### Explanation:
1. **Setup**: Uses the IEA37 wind farm layout and the Bastankhah wake model.
2. **Sampling**: Generates parameter samples (ws, wd, TI) using Saltelli's method for Sobol analysis.
3. **Simulation**: Runs parallelized PyWake simulations for each parameter set to compute `WS_eff` on a grid.
4. **Sensitivity Analysis**: Computes first-order and total-order Sobol indices for each grid point.
5. **Visualization**: Saves flow field images showing sensitivity indices for each parameter.

### Usage:
- Adjust `N` to balance accuracy and computation time.
- Reduce `grid.resolution` for faster runs.
- Outputs images (e.g., `S1_ws.png`) showing sensitivity of `WS_eff` to each parameter.
