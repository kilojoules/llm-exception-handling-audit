# PyWake Sensitivity Analysis Script

This script propagates realistic measurement uncertainties through PyWake and calculates Sobol sensitivity indices for WS_eff (effective wind speed) across the flow field. It generates a series of flow field images showing how sensitive the flow is to input uncertainties at different times.

```python
import numpy as np
import matplotlib.pyplot as plt
import xarray as xr
from py_wake.examples.data.hornsrev1 import Hornsrev1Site, V80
from py_wake.literature.gaussian_models import Bastankhah_PorteAgel_2014
from py_wake.utils.plotting import setup_plot
from SALib.analyze import sobol
from SALib.sample import saltelli
import time
import os

# Set up output directory for saving images
output_dir = "sensitivity_analysis_results"
os.makedirs(output_dir, exist_ok=True)

# Initialize PyWake model
site = Hornsrev1Site()
x, y = site.initial_position.T
windTurbines = V80()
wf_model = Bastankhah_PorteAgel_2014(site, windTurbines, k=0.0324555)

# Define the problem for sensitivity analysis
problem = {
    'num_vars': 3,
    'names': ['wd_uncertainty', 'ws_uncertainty', 'ti_uncertainty'],
    'bounds': [[-5, 5],        # Wind direction uncertainty (±5 degrees)
              [-0.5, 0.5],     # Wind speed uncertainty (±0.5 m/s)
              [-0.02, 0.02]]   # TI uncertainty (±2%)
}

# Generate samples using Saltelli's method
n_samples = 100  # Reduced for demonstration - increase for production
param_values = saltelli.sample(problem, n_samples, calc_second_order=True)

# Load time series data
from py_wake.examples.data import example_data_path
d = np.load(example_data_path + "/time_series.npz")
n_days = 30
wd, ws, ws_std = [d[k][:6*24*n_days] for k in ['wd', 'ws', 'ws_std']]
ti = np.minimum(ws_std/ws, .5)
time_stamp = np.arange(len(wd))/6/24

# Select time points to analyze (every 3 days)
time_points = np.arange(0, n_days, 3)
time_indices = [np.argmin(np.abs(time_stamp - t)) for t in time_points]

# Function to evaluate the model with uncertainties
def evaluate_model(params, time_idx):
    """Run the PyWake model with given uncertainty parameters at a specific time"""
    wd_unc, ws_unc, ti_unc = params
    
    # Apply uncertainties
    perturbed_wd = wd[time_idx] + wd_unc
    perturbed_ws = ws[time_idx] + ws_unc
    perturbed_ti = ti[time_idx] + ti_unc
    
    # Run simulation
    sim_res = wf_model(x, y, 
                       wd=perturbed_wd,
                       ws=perturbed_ws,
                       TI=perturbed_ti)
    
    # Get flow map
    flow_map = sim_res.flow_map(grid=None, wd=perturbed_wd, ws=perturbed_ws)
    
    # Return WS_eff field
    return flow_map.WS_eff.values.flatten()

# Perform sensitivity analysis at each time point
for i, time_idx in enumerate(time_indices):
    print(f"Processing time point {i+1}/{len(time_indices)} (Day {time_points[i]})")
    
    # Evaluate model at all parameter combinations for current time point
    Y = np.array([evaluate_model(params, time_idx) for params in param_values])
    
    # Perform Sobol analysis
    Si = sobol.analyze(problem, Y, calc_second_order=True, print_to_console=False)
    
    # Get grid coordinates from a sample flow map
    sample_flow = wf_model(x, y, wd=wd[time_idx], ws=ws[time_idx], TI=ti[time_idx]).flow_map()
    X, Y = np.meshgrid(sample_flow.x, sample_flow.y)
    
    # Reshape sensitivity indices to match grid
    S1_ws = Si['S1'][:, 1].reshape(X.shape)  # Sensitivity to wind speed uncertainty
    ST_ws = Si['ST'][:, 1].reshape(X.shape)  # Total sensitivity to wind speed uncertainty
    
    # Plot results
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    
    # Plot base flow field
    sample_flow.plot_wake_map(ax=axes[0])
    axes[0].set_title(f'Base Flow Field\nDay {time_points[i]:.1f}, WD={wd[time_idx]:.1f}°, WS={ws[time_idx]:.1f} m/s')
    
    # Plot first-order sensitivity to WS
    im = axes[1].contourf(X, Y, S1_ws, levels=20, cmap='viridis')
    plt.colorbar(im, ax=axes[1], label='First-order Sobol index')
    axes[1].set_title('Sensitivity to Wind Speed Uncertainty (S1)')
    windTurbines.plot(x, y, ax=axes[1])
    
    # Plot total sensitivity to WS
    im = axes[2].contourf(X, Y, ST_ws, levels=20, cmap='viridis')
    plt.colorbar(im, ax=axes[2], label='Total Sobol index')
    axes[2].set_title('Total Sensitivity to Wind Speed Uncertainty (ST)')
    windTurbines.plot(x, y, ax=axes[2])
    
    # Save figure
    fig.suptitle(f'Sensitivity Analysis at Day {time_points[i]:.1f}', y=1.02)
    plt.tight_layout()
    plt.savefig(f"{output_dir}/sensitivity_day_{time_points[i]:02.0f}.png", dpi=150, bbox_inches='tight')
    plt.close()

print("Analysis complete. Results saved to", output_dir)
```

## Key Features of the Script:

1. **Uncertainty Propagation**:
   - Considers uncertainties in wind direction (±5°), wind speed (±0.5 m/s), and turbulence intensity (±2%)
   - Uses Saltelli sampling for efficient sensitivity analysis

2. **Sobol Sensitivity Analysis**:
   - Calculates first-order (S1) and total-effect (ST) Sobol indices
   - Focuses on sensitivity of WS_eff (effective wind speed) to input uncertainties

3. **Time Series Analysis**:
   - Analyzes the flow field at regular intervals (every 3 days)
   - Shows how sensitivity changes under different inflow conditions

4. **Visualization**:
   - Generates three-panel plots for each time point:
     - Base flow field
     - First-order sensitivity to wind speed uncertainty
     - Total sensitivity to wind speed uncertainty
   - Saves all figures to an output directory

5. **Customization Options**:
   - Adjust `n_samples` for more/less accurate results
   - Modify `time_points` to analyze different time intervals
   - Change `problem['bounds']` to adjust uncertainty ranges

The script provides a comprehensive view of how measurement uncertainties propagate through the wake model and affect the flow field predictions at different times.
