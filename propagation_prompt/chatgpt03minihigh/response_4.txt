Below is an example Python script that combines PyWake’s wind‐farm simulation with an uncertainty propagation and Sobol sensitivity analysis using SALib. In this example the inflow conditions are “perturbed” with realistic measurement uncertainties (here assumed to be ±0.5 m/s in wind speed, ±2° in wind direction, and ±0.02 in turbulence intensity) and the effect on the effective wind speed (WS_eff) in the flow field is examined. For a set of three “inflow scenarios” (which you can interpret as different times in a time series) the script

• builds a Saltelli sample from a problem definition (with three uncertain inputs)  
• runs the PyWake simulation for each sample (computing the flow map using a custom grid that spans the spatial domain)  
• extracts the WS_eff field (here assumed to be an attribute of the flow map)  
• loops over every grid cell (that is, over (x,y)) to compute the first‐order Sobol sensitivity index (S1) for each uncertain parameter  
• saves contour plots (flow field images) of the spatial distribution of sensitivity indices

Before running, make sure you have installed the required packages (PyWake and SALib). For example, you might run:
    
    pip install SALib
    pip install git+https://gitlab.windenergy.dtu.dk/TOPFARM/PyWake.git

Below is the complete script:

------------------------------------------------------------
#!/usr/bin/env python
"""
This script propagates realistic measurement uncertainties
through a PyWake simulation and computes the Sobol sensitivity
of the effective wind speed (WS_eff) as a function of x and y.

For three inflow scenarios (which could represent different times),
uncertain ambient wind speed (ws), wind direction (wd) and turbulence intensity (ti)
are sampled using a Saltelli design.
For each sample the simulation is run and a wake map (flow field) is computed.
Then for each grid cell the first‐order Sobol sensitivity (S1) is computed using SALib,
and contour plots are saved that show the spatial sensitivity for each parameter.
"""

import numpy as np
import matplotlib.pyplot as plt

# Import SALib for sampling and analysis
from SALib.sample import saltelli
from SALib.analyze import sobol

# Import PyWake components
from py_wake.examples.data.iea37 import IEA37Site, IEA37_WindTurbines
from py_wake.literature.gaussian_models import Bastankhah_PorteAgel_2014
from py_wake import HorizontalGrid

# =============================================================================
# Define a function that runs a single PyWake simulation and returns the WS_eff flow field.
# The simulation is run for a given sample of the uncertain inflow parameters.
# =============================================================================
def run_flow_map(wf_model, x, y, ws, wd, ti, grid):
    """
    Run the PyWake simulation with specified inflow conditions and compute the flow map.
    
    Parameters:
      wf_model : PyWake wind-farm model object
      x, y     : arrays of turbine x and y positions (from site.initial_position.T)
      ws       : ambient wind speed [m/s]
      wd       : ambient wind direction [deg]
      ti       : ambient turbulence intensity
      grid     : an instance of HorizontalGrid defining the (x,y) grid
    
    Returns:
      field_array : 2D numpy array representing WS_eff on the grid.
    """
    # Run the simulation (static call; TI is passed if the model supports it)
    sim_res = wf_model(x, y, ws=ws, wd=wd, TI=ti)
    
    # Generate the flow map on the specified grid.
    # (The flow_map method is called with the inflow conditions; note that some PyWake models
    # might not require ws and wd to be passed again if already set.)
    flow_map = sim_res.flow_map(grid=grid, ws=ws, wd=wd)
    
    # Here we assume that the effective wind speed field is stored in the attribute "WS_eff"
    # Adjust this if your PyWake version differs.
    field = flow_map.WS_eff  
    field_array = np.array(field)  # Ensure we have a numpy array
    return field_array

# =============================================================================
# Main function: loop over inflow scenarios, run uncertainty propagation, compute Sobol indices,
# and then produce contour plots that are saved to disk.
# =============================================================================
def main():
    # --------------------------
    # Setup PyWake site, turbine, and wind-farm model
    # --------------------------
    site = IEA37Site(16)
    x_pos, y_pos = site.initial_position.T
    windTurbines = IEA37_WindTurbines()
    wf_model = Bastankhah_PorteAgel_2014(site, windTurbines, k=0.0324555)
    
    # Define a grid for the flow map based on the site extent (with added margin)
    x_min, x_max = x_pos.min() - 500, x_pos.max() + 500
    y_min, y_max = y_pos.min() - 500, y_pos.max() + 500
    # Use a coarser grid for manageable computational cost in sensitivity analysis
    grid_x = np.linspace(x_min, x_max, 20)
    grid_y = np.linspace(y_min, y_max, 20)
    grid = HorizontalGrid(x=grid_x, y=grid_y)
    grid_shape = (len(grid_y), len(grid_x))  # (ny, nx)

    # --------------------------
    # Define inflow scenarios (which here represent different times)
    # Each scenario has its own nominal inflow conditions.
    # --------------------------
    scenarios = [
       {'label': 'Scenario1', 'ws_nom': 9.8, 'wd_nom': 270, 'ti_nom': 0.10},
       {'label': 'Scenario2', 'ws_nom': 8.5, 'wd_nom': 260, 'ti_nom': 0.12},
       {'label': 'Scenario3', 'ws_nom': 10.0, 'wd_nom': 275, 'ti_nom': 0.09},
    ]
    
    # For each scenario, propagate uncertainties and compute sensitivity maps
    for scen in scenarios:
        label = scen['label']
        ws_nom = scen['ws_nom']
        wd_nom = scen['wd_nom']
        ti_nom = scen['ti_nom']
        
        # --------------------------
        # Define the uncertain problem.
        # We assume realistic measurement uncertainties:
        #    ws ±0.5 m/s, wd ±2°, ti ±0.02.
        # --------------------------
        problem = {
            'num_vars': 3,
            'names': ['ws', 'wd', 'ti'],
            'bounds': [[ws_nom - 0.5, ws_nom + 0.5],
                       [wd_nom - 2, wd_nom + 2],
                       [ti_nom - 0.02, ti_nom + 0.02]]
        }
        
        # --------------------------
        # Generate samples using the Saltelli sampler.
        # The total number of simulations will be N*(2*d + 2) where d=3.
        # Here we set N to a moderate value for demonstration purposes.
        # --------------------------
        N = 32  # base sample size; adjust as needed
        param_values = saltelli.sample(problem, N, calc_second_order=False)
        num_samples = param_values.shape[0]
        
        # Prepare an array to store the flow field output for each simulation.
        # Each simulation returns a 2D flow field (WS_eff) which is flattened.
        M = grid_shape[0] * grid_shape[1]
        Y = np.zeros((num_samples, M))
        
        print(f"Running simulations for {label} with {num_samples} samples...")
        for i, params in enumerate(param_values):
            sample_ws, sample_wd, sample_ti = params
            try:
                # Run the simulation for this sample
                field = run_flow_map(wf_model, x_pos, y_pos, sample_ws, sample_wd, sample_ti, grid)
                Y[i, :] = field.flatten()
            except Exception as e:
                print(f"Simulation failed for sample {i} with parameters {params}: {e}")
                Y[i, :] = np.nan
        
        # Remove any failed simulations (rows containing NaNs)
        valid_indices = ~np.isnan(Y).any(axis=1)
        Y_valid = Y[valid_indices, :]
        param_values_valid = param_values[valid_indices, :]
        print(f"{Y_valid.shape[0]} successful simulations out of {num_samples}.")
        
        # --------------------------
        # Compute Sobol sensitivity indices (first-order S1) for every grid point.
        # For each grid cell, we have a vector of outputs (one per successful simulation).
        # --------------------------
        # Pre-allocate arrays to hold S1 for each parameter at each grid cell.
        S1_ws = np.zeros(M)
        S1_wd = np.zeros(M)
        S1_ti = np.zeros(M)
        
        print("Performing Sobol sensitivity analysis for each grid point...")
        for j in range(M):
            # Y_j is the vector of WS_eff values at grid cell j.
            Y_j = Y_valid[:, j]
            # Run Sobol analysis. Here we only compute first-order indices.
            Si = sobol.analyze(problem, Y_j, calc_second_order=False, print_to_console=False)
            # Si['S1'] is an array of S1 indices for [ws, wd, ti]
            S1_ws[j] = Si['S1'][0]
            S1_wd[j] = Si['S1'][1]
            S1_ti[j] = Si['S1'][2]
        
        # Reshape the sensitivity indices to the grid shape.
        S1_ws_map = S1_ws.reshape(grid_shape)
        S1_wd_map = S1_wd.reshape(grid_shape)
        S1_ti_map = S1_ti.reshape(grid_shape)
        
        # --------------------------
        # Plot and save the sensitivity maps
        # --------------------------
        # Sensitivity with respect to wind speed (ws)
        fig, ax = plt.subplots(figsize=(6, 5))
        cf = ax.contourf(grid_x, grid_y, S1_ws_map, levels=10)
        ax.set_title(f"{label} - S1 Sensitivity for Wind Speed (ws)")
        ax.set_xlabel("x [m]")
        ax.set_ylabel("y [m]")
        fig.colorbar(cf, ax=ax)
        plt.savefig(f"{label}_S1_ws.png")
        plt.close(fig)
        
        # Sensitivity with respect to wind direction (wd)
        fig, ax = plt.subplots(figsize=(6, 5))
        cf = ax.contourf(grid_x, grid_y, S1_wd_map, levels=10)
        ax.set_title(f"{label} - S1 Sensitivity for Wind Direction (wd)")
        ax.set_xlabel("x [m]")
        ax.set_ylabel("y [m]")
        fig.colorbar(cf, ax=ax)
        plt.savefig(f"{label}_S1_wd.png")
        plt.close(fig)
        
        # Sensitivity with respect to turbulence intensity (ti)
        fig, ax = plt.subplots(figsize=(6, 5))
        cf = ax.contourf(grid_x, grid_y, S1_ti_map, levels=10)
        ax.set_title(f"{label} - S1 Sensitivity for Turbulence Intensity (ti)")
        ax.set_xlabel("x [m]")
        ax.set_ylabel("y [m]")
        fig.colorbar(cf, ax=ax)
        plt.savefig(f"{label}_S1_ti.png")
        plt.close(fig)
        
        print(f"Sensitivity maps for {label} saved to disk as '{label}_S1_ws.png', '{label}_S1_wd.png', and '{label}_S1_ti.png'.\n")

if __name__ == "__main__":
    main()

------------------------------------------------------------

### Notes on the script

• The script uses the IEA37 site and wind turbine data and the Bastankhah–PorteAgel (2014) Gaussian wake model from PyWake. You can switch to another site or model as needed.  
• The uncertain parameters (ws, wd, ti) and their uncertainty bounds are defined for each scenario. You may adjust the nominal values or uncertainty ranges to match your measurements.  
• The Saltelli sampling (via SALib) automatically creates the sample set required for Sobol analysis. The base sample size N is set to 32 (total runs = 256 when second-order effects are not computed) – you might increase this for a more robust analysis.  
• In the sensitivity analysis loop the code computes the first‐order sensitivity indices (S1) at each grid point (i.e. for each (x,y) location in the wake map). These indices are then reshaped to the grid and plotted as contour maps.  
• The flow-map extraction assumes that the wake map object has an attribute “WS_eff”. If your version of PyWake uses a different name for the underlying data, update the script accordingly.

Running this script will produce (and save) a series of image files (one for each uncertain parameter per scenario) that show the Sobol sensitivity of WS_eff as a function of x and y. These images provide insight into how uncertainties in the inflow propagate through the wake model at different times (or scenarios).

Feel free to adjust parameters, grid resolution, and sample sizes for your particular application.
