# Preallocate an array to store the effective wind speed field for each sample.
n_samples = param_values.shape[0]
U_results = np.zeros((n_samples, nx, ny))

print(f"\nRunning sensitivity analysis for {scenario_name} "
      f"(ws_nominal = {ws_nom} m/s, wd_nominal = {wd_nom} deg)")

# Loop over all sample runs (using tqdm for a progress bar)
for i in tqdm(range(n_samples), desc=f"Samples for {scenario_name}"):
    # Retrieve the i-th sample: perturbations to nominal wind speed and wind direction
    ws_shift = param_values[i, 0]
    wd_shift = param_values[i, 1]
    
    # Compute perturbed inflow conditions
    ws_run = ws_nom + ws_shift
    wd_run = wd_nom + wd_shift
    
    # Run the PyWake simulation for the perturbed conditions.
    # (Pass scalar ws and wd; PyWake will compute wake interactions accordingly.)
    sim_res = wf_model(x, y, ws=ws_run, wd=wd_run)
    
    # Compute the flow map on the prescribed grid.
    # Passing ws and wd again ensures that the flow map corresponds to the perturbed run.
    flow_map = sim_res.flow_map(grid=grid, ws=ws_run, wd=wd_run)
    
    # Extract the effective wind speed field from the flow map.
    # (In your version of PyWake, the attribute name may differ.)
    U_field = np.array(flow_map.U)
    U_results[i, :, :] = U_field

# Prepare arrays to hold the first order Sobol indices (S1) for each parameter.
S1_ws = np.zeros((nx, ny))  # sensitivity with respect to wind speed shift
S1_wd = np.zeros((nx, ny))  # sensitivity with respect to wind direction shift

# Compute the Sobol indices at each grid point by looping over the grid.
# NOTE: For large grids this nested loop can be computationally expensive; consider parallelizing if needed.
print(f"Computing Sobol indices for each grid point for {scenario_name}...")
for ix in range(nx):
    for iy in range(ny):
        # For the grid cell (ix, iy), extract the model outputs across all sample runs.
        Y = U_results[:, ix, iy]
        
        # Perform Sobol sensitivity analysis on these outputs.
        # The analyze function expects Y to be in the same order as generated by Saltelli sampling.
        Si = sobol.analyze(problem, Y, print_to_console=False)
        
        # Save the first order sensitivity index for each parameter.
        S1_ws[ix, iy] = Si['S1'][0]  # index for ws_shift
        S1_wd[ix, iy] = Si['S1'][1]  # index for wd_shift

# --- Plot and Save Figures ---
# Plot the nominal flow field for reference (using the dummy simulation U_dummy).
plt.figure()
cp = plt.contourf(np.arange(nx), np.arange(ny), U_dummy, cmap='viridis')
plt.colorbar(cp, label='Effective Wind Speed [m/s]')
plt.title(f"Nominal Flow Field - {scenario_name}\n(ws = {ws_nom} m/s, wd = {wd_nom}Â°)")
plt.xlabel('x grid index')
plt.ylabel('y grid index')
plt.savefig(os.path.join(out_dir, f"{scenario_name}_flow_field.png"))
plt.close()

# Plot the Sobol sensitivity field for the wind speed uncertainty (ws_shift)
plt.figure()
plt.imshow(S1_ws, origin='lower', cmap='viridis', extent=[0, nx, 0, ny])
plt.colorbar(label='S1 index (ws_shift)')
plt.title(f"Sobol Sensitivity to Wind Speed Uncertainty\n{scenario_name}")
plt.xlabel('x grid coordinate')
plt.ylabel('y grid coordinate')
plt.savefig(os.path.join(out_dir, f"{scenario_name}_sobol_ws.png"))
plt.close()

# Plot the Sobol sensitivity field for the wind direction uncertainty (wd_shift)
plt.figure()
plt.imshow(S1_wd, origin='lower', cmap='viridis', extent=[0, nx, 0, ny])
plt.colorbar(label='S1 index (wd_shift)')
plt.title(f"Sobol Sensitivity to Wind Direction Uncertainty\n{scenario_name}")
plt.xlabel('x grid coordinate')
plt.ylabel('y grid coordinate')
plt.savefig(os.path.join(out_dir, f"{scenario_name}_sobol_wd.png"))
plt.close()

print(f"Sensitivity maps for {scenario_name} saved in '{out_dir}' directory.")

