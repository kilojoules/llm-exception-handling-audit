Your current approach shows a good understanding of using PyWake for wind farm modeling and Bayesian optimization for parameter tuning. You've correctly identified the need to compare simulated velocity deficits with the reference data and are using RMSE as your evaluation metric. The animation of the optimization process is also a nice touch for visualizing convergence.

However, you've pinpointed some key areas for improvement, and your suggestions are spot on:

Regarding your current approach:

    Flow Field Plots: You're right, plotting the raw WS_eff (velocity) from the simulation directly against the observed deficits is misleading. The comparison should be between the simulated velocity deficit and the observed deficit. Your current calculation of pred seems to address this ((sim_res.WS - flow_map.WS_eff.isel(h=0, time=t)) / sim_res.WS), which is good. However, the contour plots are still directly showing flow_map.WS_eff.
    Error Reporting: Reporting average and p90 of the errors across the flow field would provide a more comprehensive understanding of the model's performance beyond just the RMSE. This can highlight areas of larger discrepancies.
    Code Modularization: The current structure, especially within the evaluate_rmse function, is quite complex and has repeated code blocks for instantiating the All2AllIterative model based on MODEL and DOWNWIND flags. This makes the code harder to read, maintain, and extend.

Your proposed changes and my thoughts:

    Changing Flow Field Plots: Absolutely necessary. You should plot the simulated velocity deficit (calculated as you are doing in the pred variable) and compare it to the observed deficit. Additionally, plotting the difference between the two would be very informative.
    Reporting Average and p90 of Errors: This is a great idea. After calculating the difference between the simulated and observed deficits, you can easily compute the mean and the 90th percentile across the spatial dimensions (x and y).
    Full Rewrite for Modularization: I strongly agree with this. A rewrite focusing on modularity will significantly improve the codebase. Separating the instantiation of the WindFarmModel based on the chosen MODEL and DOWNWIND settings into dedicated functions will make the code cleaner and easier to manage.

Let's proceed with the code rewrite for better modularization.

Here's an attempt at refactoring your code to improve the modularity of instantiating the wfm. I'll aim to keep all the deficit settings, MODEL, and UPSTREAM/DOWNWIND logic intact while making the instantiation cleaner.
Python

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import xarray as xr
from py_wake.rotor_avg_models.gaussian_overlap_model import GaussianOverlapAvgModel
from py_wake.deficit_models.gaussian import TurboGaussianDeficit
from py_wake.examples.data.dtu10mw._dtu10mw import DTU10MW
from py_wake.deficit_models.gaussian import BlondelSuperGaussianDeficit2020
from py_wake import HorizontalGrid
from py_wake.deflection_models import JimenezWakeDeflection
from py_wake.turbulence_models import CrespoHernandez
from py_wake.rotor_avg_models import RotorCenter
from py_wake.deficit_models import SelfSimilarityDeficit2020
from py_wake.wind_farm_models import PropagateDownwind, All2AllIterative
from py_wake.superposition_models import LinearSum
from py_wake.ground_models import Mirror
from py_wake.examples.data.hornsrev1 import Hornsrev1Site
from bayes_opt import BayesianOptimization
from py_wake.deficit_models.utils import ct2a_mom1d

dat = xr.load_dataset('./DTU10MW.nc')
turbine = DTU10MW()
D = turbine.diameter()
dat = dat.assign_coords(x=dat.x * D, y=dat.y * D)

DOWNWIND = True
MODEL = 2

if MODEL not in set([1, 2]):
    raise Exception("Bad Model Number")

if DOWNWIND:
    X_LB = 2
    X_UB = 10
else:
    X_LB = -2
    X_UB = -1

roi_x = slice(X_LB * D, X_UB * D)
roi_y = slice(-2 * D, 2 * D)

flow_roi = dat.sel(x=roi_x, y=roi_y)
target_x = flow_roi.x
target_y = flow_roi.y

TIs = np.arange(0.05, 0.45, 0.05)
WSs = np.arange(4, 11)
full_ti = [TIs for _ in range(WSs.size)]
full_ti = np.array(full_ti).flatten()
full_ws = [[WSs[ii]] * TIs.size for ii in range(WSs.size)]
full_ws = np.array(full_ws).flatten()
assert (full_ws.size == full_ti.size)

site = Hornsrev1Site()

obs_values = []
sim_res_initial = All2AllIterative(site, turbine,
                                   wake_deficitModel=BlondelSuperGaussianDeficit2020(),
                                   superpositionModel=LinearSum(), deflectionModel=None,
                                   turbulenceModel=CrespoHernandez(),
                                   blockage_deficitModel=SelfSimilarityDeficit2020())([0], [0], ws=full_ws, TI=full_ti, wd=[270] * full_ti.size, time=True)

flow_map_initial = sim_res_initial.flow_map(HorizontalGrid(x=target_x, y=target_y))

for t in range(flow_map_initial.time.size):
    this_pred_sim = sim_res_initial.isel(time=t, wt=0)
    observed_deficit = flow_roi.deficits.interp(ct=this_pred_sim.CT, ti=this_pred_sim.TI, z=0)
    obs_values.append(observed_deficit.T)

all_obs = xr.concat(obs_values, dim='time')

def instantiate_wfm(kwargs):
    if DOWNWIND:
        if MODEL == 1:
            def_args = {k: kwargs[k] for k in ['a_s', 'b_s', 'c_s', 'b_f', 'c_f']}
            turb_args = {'c': np.array([kwargs['ch1'], kwargs['ch2'], kwargs['ch3'], kwargs['ch4']])}
            wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
            blockage_deficitModel = None
        else:
            turb_args = {'c': np.array([kwargs['ch1'], kwargs['ch2'], kwargs['ch3'], kwargs['ch4']])}
            wake_deficitModel = TurboGaussianDeficit(A=kwargs['A'], cTI=[kwargs['cti1'], kwargs['cti2']],
                                                    ctlim=kwargs['ctlim'], ceps=kwargs['ceps'],
                                                    ct2a=ct2a_mom1d,
                                                    groundModel=Mirror(),
                                                    rotorAvgModel=GaussianOverlapAvgModel())
            wake_deficitModel.WS_key = 'WS_jlk'
            blockage_deficitModel = SelfSimilarityDeficit2020(groundModel=Mirror())
    else:
        def_args = {}
        turb_args = {}
        wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
        blockage_args = {'ss_alpha': kwargs['ss_alpha'], 'ss_beta': kwargs['ss_beta'], 'r12p': np.array([kwargs['rp1'], kwargs['rp2']]), 'ngp': np.array([kwargs['ng1'], kwargs['ng2'], kwargs['ng3'], kwargs['ng4']])}
        blockage_deficitModel = SelfSimilarityDeficit2020(**blockage_args)
        if MODEL == 2:
            blockage_deficitModel.groundModel = Mirror()

    wfm = All2AllIterative(site, turbine,
                            wake_deficitModel=wake_deficitModel,
                            superpositionModel=LinearSum(), deflectionModel=None,
                            turbulenceModel=CrespoHernandez(**turb_args),
                            blockage_deficitModel=blockage_deficitModel)
    return wfm

def evaluate_rmse(**kwargs):
    wfm = instantiate_wfm(kwargs)
    sim_res = wfm([0], [0], ws=full_ws, TI=full_ti, wd=[270] * full_ti.size, time=True)
    flow_map = None
    for tt in range(full_ws.size):
        fm = sim_res.flow_map(HorizontalGrid(x=target_x, y=target_y), time=[tt])['WS_eff']
        if flow_map is None:
            flow_map = fm
        else:
            flow_map = xr.concat([flow_map, fm], dim='time')
    pred = (sim_res.WS - flow_map.isel(h=0)) / sim_res.WS
    rmse = float(np.sqrt(((all_obs - pred) ** 2).mean(['x', 'y'])).mean('time'))
    if np.isnan(rmse):
        return -0.5
    return -rmse

if MODEL == 1:
    if DOWNWIND:
        pbounds = {
            'a_s': (0.001, 0.5),
            'b_s': (0.001, 0.01),
            'c_s': (0.001, 0.5),
            'b_f': (-2, 1),
            'c_f': (0.1, 5),
            'ch1': (-1, 2),
            'ch2': (-1, 2),
            'ch3': (-1, 2),
            'ch4': (-1, 2),
        }
        defaults = {'a_s': 0.17, 'b_s': 0.005, 'c_s': 0.2, 'b_f': -0.68, 'c_f': 2.41,
                    'ch1': 0.73, 'ch2': 0.8325, 'ch3': -0.0325, 'ch4': -0.32}
    else:
        pbounds = {
            'ss_alpha': (0.05, 3),
            'ss_beta': (0.05, 3),
            'rp1': (-2, 2),
            'rp2': (-2, 2),
            'ng1': (-3, 3),
            'ng2': (-3, 3),
            'ng3': (-3, 3),
            'ng4': (-3, 3),
            'fg1': (-2, 2),
            'fg2': (-2, 2),
            'fg3': (-2, 2),
            'fg4': (-2, 2)
        }
        defaults = {
            'ss_alpha': 0.8888888888888888,
            'ss_beta': 1.4142135623730951,
            'rp1': -0.672,
            'rp2': 0.4897,
            'ng1': -1.381,
            'ng2': 2.627,
            'ng3': -1.524,
            'ng4': 1.336,
            'fg1': -0.06489,
            'fg2': 0.4911,
            'fg3': 1.116,
            'fg4': -0.1577
        }
else:
    defaults = {
        'A': 0.04,
        'cti1': 1.5,
        'cti2': 0.8,
        'ceps': 0.25,
        'ctlim': 0.999,
        'ch1': 0.73,
        'ch2': 0.8325,
        'ch3': -0.0325,
        'ch4': -0.3
    }
    pbounds = {
        'A': (0.001, .5),
        'cti1': (.01, 5),
        'cti2': (0.01, 5),
        'ceps': (0.01, 3),
        'ctlim': (0.01, 1),
        'ch1': (-1, 2),
        'ch2': (-1, 2),
        'ch3': (-1, 2),
        'ch4': (-1, 2),
    }

optimizer = BayesianOptimization(f=evaluate_rmse, pbounds=pbounds, random_state=1)
optimizer.probe(params=defaults, lazy=True)
optimizer.maximize(init_points=50, n_iter=200)

best_params = optimizer.max['params']
best_rmse = -optimizer.max['target']

def update_plot(frame):
    ax1.clear()
    ax2.clear()

    best_so_far_params = {}
    best_so_far_rmse = float('inf')
    best_so_far_rmses = []
    for i in range(frame + 1):
        if -optimizer.space.target[i] <= best_so_far_rmse:
            best_so_far_rmse = -optimizer.space.target[i]
            best_so_far_params = optimizer.res[i]['params']
        best_so_far_rmses.append(best_so_far_rmse)

    ax1.plot(-np.array(optimizer.space.target), color='gray', alpha=0.5)
    ax1.plot(np.array(best_so_far_rmses), color='black')
    ax1.set_title('Optimization Convergence')
    ax1.set_xlabel('Iteration')
    ax1.set_ylabel('RMSE')
    ax1.grid(True)

    keys = list(best_so_far_params.keys())
    best_vals = []
    default_vals = []
    for key in keys:
        best_vals.append(best_so_far_params[key])
        default_vals.append(defaults[key])

    ax2.bar(keys, best_vals, label='Optimized')
    ax2.bar(keys, default_vals, edgecolor='black', linewidth=2, color='none', capstyle='butt', label='Default')
    ax2.set_title(f'Best RMSE: {best_so_far_rmse:.4f}')
    ax2.tick_params(axis='x', rotation=45)
    ax2.legend()
    plt.tight_layout()
    return ax1, ax2

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
ani = animation.FuncAnimation(fig, update_plot, frames=len(optimizer.space.target), repeat=False)

writer = animation.FFMpegWriter(fps=15)
ani.save('optimization_animation_%i_%i.mp4' % (X_LB, X_UB), writer=writer)
plt.close('all')

wfm_final = instantiate_wfm(best_params)
sim_res_final = wfm_final([0], [0], ws=full_ws, TI=full_ti, wd=[270] * full_ti.size, time=True)

rmse_values = []
mean_error_values = []
p90_error_values = []

for t in range(sim_res_final.time.size):
    this_pred_sim = sim_res_final.isel(time=t)
    observed_deficit = flow_roi.deficits.interp(ct=this_pred_sim.CT, ti=this_pred_sim.TI, z=0).isel(wt=0)
    simulated_velocity = sim_res_final.flow_map(HorizontalGrid(x=target_x, y=target_y), time=[t])['WS_eff'].isel(h=0)
    predicted_deficit = (this_pred_sim.WS - simulated_velocity) / this_pred_sim.WS
    diff = observed_deficit.T - predicted_deficit

    rmse = np.sqrt(np.mean(diff**2))
    mean_error = np.mean(diff)
    p90_error = np.percentile(np.abs(diff), 90)

    rmse_values.append(rmse)
    mean_error_values.append(mean_error)
    p90_error_values.append(p90_error)

    fig, ax = plt.subplots(3, 1, figsize

