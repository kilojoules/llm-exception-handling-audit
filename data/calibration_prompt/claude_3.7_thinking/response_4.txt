I've taken a look at your wind farm modeling and optimization code. You're using the py_wake library to analyze wind turbine wake effects, optimize model parameters with Bayesian optimization, and evaluate the results through various visualizations.
You're right about needing to better modularize the code, especially for instantiating the wind farm model (wfm). The current implementation has a lot of duplicated logic and intertwined functionality. I'll rewrite it with improved organization while preserving all the deficit settings, MODEL, and UPSTREAM logic.
Let me also address your concern about the flow field plots - I'll incorporate better reporting of averages and p90s of the errors in the redesign.

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import xarray as xr
from py_wake.rotor_avg_models.gaussian_overlap_model import GaussianOverlapAvgModel
from py_wake.deficit_models.gaussian import TurboGaussianDeficit
from py_wake.examples.data.dtu10mw._dtu10mw import DTU10MW
from py_wake.deficit_models.gaussian import BlondelSuperGaussianDeficit2020
from py_wake import HorizontalGrid
from py_wake.deflection_models import JimenezWakeDeflection
from py_wake.turbulence_models import CrespoHernandez
from py_wake.rotor_avg_models import RotorCenter
from py_wake.deficit_models import SelfSimilarityDeficit2020
from py_wake.wind_farm_models import PropagateDownwind, All2AllIterative
from py_wake.superposition_models import LinearSum
from py_wake.ground_models import Mirror
from py_wake.examples.data.hornsrev1 import Hornsrev1Site
from bayes_opt import BayesianOptimization
from py_wake.deficit_models.utils import ct2a_mom1d
import os


class DataLoader:
    """
    Handles loading and preparation of wind turbine data.
    """
    def __init__(self, data_path='./DTU10MW.nc'):
        self.data_path = data_path
        self.turbine = DTU10MW()
        self.D = self.turbine.diameter()
        self.dat = None
        
    def load(self):
        """
        Load wind turbine data and scale coordinates.
        
        Returns:
        --------
        xarray.Dataset
            Loaded and scaled dataset
        """
        self.dat = xr.load_dataset(self.data_path)
        self.dat = self.dat.assign_coords(x=self.dat.x * self.D, y=self.dat.y * self.D)
        return self.dat
    
    def get_roi(self, downwind=True, x_lb=None, x_ub=None):
        """
        Get region of interest based on downwind/upwind configuration.
        
        Parameters:
        -----------
        downwind : bool
            Whether to analyze downwind (True) or upwind (False) effects
        x_lb : float, optional
            Lower bound for x in units of turbine diameter
        x_ub : float, optional
            Upper bound for x in units of turbine diameter
            
        Returns:
        --------
        tuple
            (flow_roi, target_x, target_y, x_lb, x_ub)
        """
        if self.dat is None:
            self.load()
            
        # Set default bounds if not provided
        if x_lb is None or x_ub is None:
            if downwind:
                x_lb = 2
                x_ub = 10
            else:
                x_lb = -2
                x_ub = -1
        
        roi_x = slice(x_lb * self.D, x_ub * self.D)
        roi_y = slice(-2 * self.D, 2 * self.D)
        
        flow_roi = self.dat.sel(x=roi_x, y=roi_y)
        target_x = flow_roi.x
        target_y = flow_roi.y
        
        return flow_roi, target_x, target_y, x_lb, x_ub


class ModelConfiguration:
    """
    Handles model configuration and parameter setup.
    """
    def __init__(self, model_type=2, downwind=True):
        """
        Initialize model configuration.
        
        Parameters:
        -----------
        model_type : int
            Type of model to use: 1 for BlondelSuperGaussianDeficit2020, 2 for TurboGaussianDeficit
        downwind : bool
            Whether to analyze downwind (True) or upwind (False) effects
        """
        self.MODEL = model_type
        if self.MODEL not in set([1, 2]):
            raise ValueError("MODEL must be either 1 or 2")
            
        self.DOWNWIND = downwind
        
        # Setup default parameters and bounds based on model type and direction
        self.defaults = {}
        self.pbounds = {}
        self._setup_default_parameters()
    
    def _setup_default_parameters(self):
        """
        Setup default parameters and bounds for optimization based on the model type and direction.
        """
        if self.MODEL == 1:
            if self.DOWNWIND:
                self.defaults = {
                    'a_s': 0.17, 'b_s': 0.005, 'c_s': 0.2, 'b_f': -0.68, 'c_f': 2.41,
                    'ch1': 0.73, 'ch2': 0.8325, 'ch3': -0.0325, 'ch4': -0.32
                }
                self.pbounds = {
                    'a_s': (0.001, 0.5),
                    'b_s': (0.001, 0.01),
                    'c_s': (0.001, 0.5),
                    'b_f': (-2, 1),
                    'c_f': (0.1, 5),
                    'ch1': (-1, 2),
                    'ch2': (-1, 2),
                    'ch3': (-1, 2),
                    'ch4': (-1, 2),
                }
            else:
                self.defaults = {
                    'ss_alpha': 0.8888888888888888,
                    'ss_beta': 1.4142135623730951,
                    'rp1': -0.672,
                    'rp2': 0.4897,
                    'ng1': -1.381,
                    'ng2': 2.627,
                    'ng3': -1.524,
                    'ng4': 1.336,
                    'fg1': -0.06489,
                    'fg2': 0.4911,
                    'fg3': 1.116,
                    'fg4': -0.1577
                }
                self.pbounds = {
                    'ss_alpha': (0.05, 3),
                    'ss_beta': (0.05, 3),
                    'rp1': (-2, 2),
                    'rp2': (-2, 2),
                    'ng1': (-3, 3),
                    'ng2': (-3, 3),
                    'ng3': (-3, 3),
                    'ng4': (-3, 3),
                    'fg1': (-2, 2),
                    'fg2': (-2, 2),
                    'fg3': (-2, 2),
                    'fg4': (-2, 2)
                }
        else:  # MODEL 2
            self.defaults = {
                'A': 0.04,
                'cti1': 1.5,
                'cti2': 0.8,
                'ceps': 0.25,
                'ctlim': 0.999,
                'ch1': 0.73,
                'ch2': 0.8325,
                'ch3': -0.0325,
                'ch4': -0.3
            }
            self.pbounds = {
                'A': (0.001, .5),
                'cti1': (.01, 5),
                'cti2': (0.01, 5),
                'ceps': (0.01, 3),
                'ctlim': (0.01, 1),
                'ch1': (-1, 2),
                'ch2': (-1, 2),
                'ch3': (-1, 2),
                'ch4': (-1, 2),
            }


class WindFarmModelFactory:
    """
    Factory for creating wind farm models with different configurations.
    """
    def __init__(self, site=None, turbine=None):
        """
        Initialize the wind farm model factory.
        
        Parameters:
        -----------
        site : Site object, optional
            Site object from py_wake
        turbine : Turbine object, optional
            Turbine object from py_wake
        """
        self.site = site if site is not None else Hornsrev1Site()
        self.turbine = turbine if turbine is not None else DTU10MW()
    
    def create_model(self, model_type, downwind, params):
        """
        Create a wind farm model with specified configuration.
        
        Parameters:
        -----------
        model_type : int
            Type of model to use: 1 for BlondelSuperGaussianDeficit2020, 2 for TurboGaussianDeficit
        downwind : bool
            Whether to analyze downwind (True) or upwind (False) effects
        params : dict
            Model parameters
            
        Returns:
        --------
        All2AllIterative
            Configured wind farm model
        """
        # Initialize model parameters
        def_args = {}
        turb_args = {}
        blockage_args = {}
        
        # Configure wake deficit model based on model type and downwind/upwind
        if downwind:
            if model_type == 1:
                def_args = {k: params[k] for k in ['a_s', 'b_s', 'c_s', 'b_f', 'c_f']}
                turb_args = {'c': np.array([params['ch1'], params['ch2'], params['ch3'], params['ch4']])}
                wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
                blockage_deficitModel = SelfSimilarityDeficit2020()
            else:  # model_type 2
                turb_args = {'c': np.array([params['ch1'], params['ch2'], params['ch3'], params['ch4']])}
                wake_deficitModel = TurboGaussianDeficit(
                    A=params['A'], 
                    cTI=[params['cti1'], params['cti2']],
                    ctlim=params['ctlim'], 
                    ceps=params['ceps'],
                    ct2a=ct2a_mom1d,
                    groundModel=Mirror(),
                    rotorAvgModel=GaussianOverlapAvgModel()
                )
                wake_deficitModel.WS_key = 'WS_jlk'
                blockage_deficitModel = SelfSimilarityDeficit2020()
        else:  # Not downwind
            wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
            blockage_args = {
                'ss_alpha': params['ss_alpha'], 
                'ss_beta': params['ss_beta'], 
                'r12p': np.array([params['rp1'], params['rp2']]), 
                'ngp': np.array([params['ng1'], params['ng2'], params['ng3'], params['ng4']])
            }
            if model_type == 2:
                blockage_args['groundModel'] = Mirror()
            blockage_deficitModel = SelfSimilarityDeficit2020(**blockage_args)
        
        # Create the wind farm model
        wfm = All2AllIterative(
            self.site, self.turbine,
            wake_deficitModel=wake_deficitModel,
            superpositionModel=LinearSum(), 
            deflectionModel=None,
            turbulenceModel=CrespoHernandez(**turb_args),
            blockage_deficitModel=blockage_deficitModel
        )
        
        return wfm


class WindDataGenerator:
    """
    Generates wind speed and turbulence intensity data for simulations.
    """
    def __init__(self):
        """Initialize the wind data generator."""
        self.full_ws = None
        self.full_ti = None
    
    def generate(self, ws_range=(4, 11), ti_range=(0.05, 0.45, 0.05)):
        """
        Generate wind speed and turbulence intensity data.
        
        Parameters:
        -----------
        ws_range : tuple
            Range of wind speeds (start, end)
        ti_range : tuple
            Range of turbulence intensities (start, end, step)
            
        Returns:
        --------
        tuple
            (full_ws, full_ti)
        """
        TIs = np.arange(*ti_range)
        WSs = np.arange(*ws_range)
        
        full_ti = [TIs for _ in range(WSs.size)]
        self.full_ti = np.array(full_ti).flatten()
        
        full_ws = [[WSs[ii]] * TIs.size for ii in range(WSs.size)]
        self.full_ws = np.array(full_ws).flatten()
        
        assert (self.full_ws.size == self.full_ti.size)
        
        return self.full_ws, self.full_ti


class WindFarmOptimizer:
    """
    Handles optimization of wind farm model parameters.
    """
    def __init__(self, data_loader, model_config, model_factory, wind_data_generator):
        """
        Initialize the wind farm optimizer.
        
        Parameters:
        -----------
        data_loader : DataLoader
            Object for loading and preparing data
        model_config : ModelConfiguration
            Object for configuring models
        model_factory : WindFarmModelFactory
            Factory for creating wind farm models
        wind_data_generator : WindDataGenerator
            Object for generating wind data
        """
        self.data_loader = data_loader
        self.model_config = model_config
        self.model_factory = model_factory
        self.wind_data_generator = wind_data_generator
        
        # Get data
        self.flow_roi, self.target_x, self.target_y, self.X_LB, self.X_UB = data_loader.get_roi(
            downwind=model_config.DOWNWIND
        )
        
        # Generate wind data
        self.full_ws, self.full_ti = wind_data_generator.generate()
        
        # Prepare observation data
        self.all_obs = self._prepare_observations()
    
    def _prepare_observations(self):
        """
        Prepare observation data for comparison with model predictions.
        
        Returns:
        --------
        xarray.DataArray
            Observed deficits
        """
        # Get initial simulation results to prepare observations
        init_wfm = All2AllIterative(
            self.model_factory.site, self.model_factory.turbine,
            wake_deficitModel=BlondelSuperGaussianDeficit2020(),
            superpositionModel=LinearSum(), deflectionModel=None,
            turbulenceModel=CrespoHernandez(),
            blockage_deficitModel=SelfSimilarityDeficit2020()
        )
        
        sim_res = init_wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                         wd=[270] * self.full_ti.size, time=True)
        
        flow_map = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y))
        
        obs_values = []
        for t in range(flow_map.time.size):
            this_pred_sim = sim_res.isel(time=t, wt=0)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_pred_sim.CT, ti=this_pred_sim.TI, z=0
            )
            obs_values.append(observed_deficit.T)
        
        return xr.concat(obs_values, dim='time')
    
    def evaluate_rmse(self, **kwargs):
        """
        Evaluate the root mean squared error between observations and model predictions.
        
        Parameters:
        -----------
        **kwargs : dict
            Model parameters
            
        Returns:
        --------
        float
            Negative RMSE (for maximization in Bayesian optimization)
        """
        # Create wind farm model with the given parameters
        wfm = self.model_factory.create_model(
            self.model_config.MODEL, 
            self.model_config.DOWNWIND, 
            kwargs
        )
        
        # Run simulation
        sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                     wd=[270] * self.full_ti.size, time=True)
        
        # Calculate flow map for all time points
        flow_map = None
        for tt in range(self.full_ws.size):
            fm = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y), time=[tt])['WS_eff']
            if flow_map is None:
                flow_map = fm
            else:
                flow_map = xr.concat([flow_map, fm], dim='time')
        
        # Calculate deficit
        pred = (sim_res.WS - flow_map.isel(h=0)) / sim_res.WS
        
        # Calculate RMSE
        rmse = float(np.sqrt(((self.all_obs - pred) ** 2).mean(['x', 'y'])).mean('time'))
        
        if np.isnan(rmse):
            return -0.5
        
        return -rmse
    
    def optimize(self, init_points=50, n_iter=200, random_state=1):
        """
        Optimize model parameters using Bayesian optimization.
        
        Parameters:
        -----------
        init_points : int
            Number of initial points for Bayesian optimization
        n_iter : int
            Number of iterations for Bayesian optimization
        random_state : int
            Random seed for reproducibility
            
        Returns:
        --------
        tuple
            (optimizer, best_params, best_rmse)
        """
        optimizer = BayesianOptimization(
            f=self.evaluate_rmse, 
            pbounds=self.model_config.pbounds, 
            random_state=random_state
        )
        
        optimizer.probe(params=self.model_config.defaults, lazy=True)
        optimizer.maximize(init_points=init_points, n_iter=n_iter)
        
        best_params = optimizer.max['params']
        best_rmse = -optimizer.max['target']
        
        return optimizer, best_params, best_rmse


class WindFarmVisualizer:
    """
    Handles visualization of wind farm optimization and evaluation results.
    """
    def __init__(self, output_dir='figs'):
        """
        Initialize the visualizer.
        
        Parameters:
        -----------
        output_dir : str
            Directory to save output visualizations
        """
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
    
    def visualize_optimization(self, optimizer, defaults, output_file=None):
        """
        Visualize the optimization process with an animation.
        
        Parameters:
        -----------
        optimizer : BayesianOptimization
            Optimizer object with results
        defaults : dict
            Default parameter values
        output_file : str, optional
            Path to save the animation
        """
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        def update_plot(frame):
            ax1.clear()
            ax2.clear()
            
            # Get the best parameters and corresponding RMSE up to the current frame
            best_so_far_params = {}
            best_so_far_rmse = float('inf')
            best_so_far_rmses = []
            
            for i in range(frame + 1):
                if -optimizer.space.target[i] <= best_so_far_rmse:
                    best_so_far_rmse = -optimizer.space.target[i]
                    best_so_far_params = optimizer.res[i]['params']
                best_so_far_rmses.append(best_so_far_rmse)
            
            # Plot the entire history in gray
            ax1.plot(-np.array(optimizer.space.target), color='gray', alpha=0.5)
            # Plot the best RMSE so far in black
            ax1.plot(np.array(best_so_far_rmses), color='black')
            ax1.set_title('Optimization Convergence')
            ax1.set_xlabel('Iteration')
            ax1.set_ylabel('RMSE')
            ax1.grid(True)
            
            # Use the best parameters so far for the bar plot
            keys = list(best_so_far_params.keys())
            best_vals = []
            default_vals = []
            
            for key in keys:
                best_vals.append(best_so_far_params[key])
                default_vals.append(defaults[key])
            
            ax2.bar(keys, best_vals, label='Optimized')
            ax2.bar(keys, default_vals, edgecolor='black', linewidth=2, color='none', 
                   capstyle='butt', label='Default')
            ax2.set_title(f'Best RMSE: {best_so_far_rmse:.4f}')
            ax2.tick_params(axis='x', rotation=45)
            ax2.legend()
            
            plt.tight_layout()
            return ax1, ax2
        
        ani = animation.FuncAnimation(
            fig, update_plot, frames=len(optimizer.space.target), repeat=False
        )
        
        if output_file is None:
            output_file = f'{self.output_dir}/optimization_animation.mp4'
            
        # Save as MP4
        writer = animation.FFMpegWriter(fps=15)
        ani.save(output_file, writer=writer)
        plt.close('all')
    
    def plot_flow_fields(self, sim_res, observed_data, target_x, target_y, time_idx, prefix='flow_field'):
        """
        Plot flow field comparisons between observations and predictions.
        This includes velocity deficit, error metrics, and statistical analysis.
        
        Parameters:
        -----------
        sim_res : object
            Simulation results object from py_wake
        observed_data : xarray.DataArray
            Observed data to compare against
        target_x : array
            X coordinates for plotting
        target_y : array
            Y coordinates for plotting
        time_idx : int
            Time index to plot
        prefix : str
            Prefix for output filenames
            
        Returns:
        --------
        dict
            Error metrics
        """
        # Get flow map from simulation results
        flow_map = sim_res.flow_map(HorizontalGrid(x=target_x, y=target_y))
        
        # Get prediction for this time point
        this_pred_sim = sim_res.isel(time=time_idx)
        
        # Get observed deficit
        observed_deficit = observed_data.interp(
            ct=this_pred_sim.CT, ti=this_pred_sim.TI, z=0
        ).isel(wt=0)
        
        # Calculate velocity deficit from flow map
        # Note: flow_map.WS_eff is the velocity while the reference data has velocity deficit
        pred_velocity = flow_map.WS_eff.isel(h=0, time=time_idx)
        pred_deficit = (this_pred_sim.WS - pred_velocity) / this_pred_sim.WS
        
        # Calculate difference between observed and predicted
        diff = observed_deficit.T - pred_deficit
        
        # Calculate error metrics
        rmse = np.sqrt(np.mean(diff**2))
        mae = np.mean(np.abs(diff))
        p90_error = np.percentile(np.abs(diff), 90)
        
        # Create figure with subplots
        fig, axes = plt.subplots(3, 1, figsize=(8, 15))
        
        # Plot observed deficit
        co = axes[0].contourf(target_x, target_y, observed_deficit.T, cmap='viridis')
        fig.colorbar(co, ax=axes[0], label='Velocity Deficit')
        axes[0].set_title('Observed Deficit')
        axes[0].set_ylabel('y (m)')
        
        # Plot predicted deficit
        cp = axes[1].contourf(target_x, target_y, pred_deficit, cmap='viridis')
        fig.colorbar(cp, ax=axes[1], label='Velocity Deficit')
        axes[1].set_title('Predicted Deficit')
        axes[1].set_ylabel('y (m)')
        
        # Plot difference with diverging colormap
        cd = axes[2].contourf(target_x, target_y, diff, cmap='RdBu_r', 
                             vmin=-np.max(np.abs(diff)), vmax=np.max(np.abs(diff)))
        fig.colorbar(cd, ax=axes[2], label='Difference')
        axes[2].set_title(f'Difference (RMSE={rmse:.4f}, MAE={mae:.4f}, P90={p90_error:.4f})')
        axes[2].set_xlabel('x (m)')
        axes[2].set_ylabel('y (m)')
        
        plt.tight_layout()
        plt.savefig(f'{self.output_dir}/{prefix}_time_{time_idx}.png')
        plt.close(fig)
        
        return {
            'rmse': rmse,
            'mae': mae,
            'p90_error': p90_error
        }
    
    def plot_error_statistics(self, error_metrics, x_lb, x_ub, output_file=None):
        """
        Plot error statistics across all time points.
        
        Parameters:
        -----------
        error_metrics : list
            List of dictionaries containing error metrics for each time point
        x_lb : float
            Lower bound for x in units of turbine diameter
        x_ub : float
            Upper bound for x in units of turbine diameter
        output_file : str, optional
            File to save the plot
        """
        if output_file is None:
            output_file = f'{self.output_dir}/error_statistics_LB_{x_lb}_UB_{x_ub}.png'
            
        # Extract metrics
        time_indices = range(len(error_metrics))
        rmse_values = [m['rmse'] for m in error_metrics]
        mae_values = [m['mae'] for m in error_metrics]
        p90_values = [m['p90_error'] for m in error_metrics]
        
        # Create figure
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # Plot metrics
        ax.plot(time_indices, rmse_values, 'o-', label='RMSE')
        ax.plot(time_indices, mae_values, 's-', label='MAE')
        ax.plot(time_indices, p90_values, '^-', label='P90 Error')
        
        # Add average lines
        ax.axhline(np.mean(rmse_values), color='blue', linestyle='--', alpha=0.5, 
                  label=f'Avg RMSE: {np.mean(rmse_values):.4f}')
        ax.axhline(np.mean(mae_values), color='orange', linestyle='--', alpha=0.5, 
                  label=f'Avg MAE: {np.mean(mae_values):.4f}')
        ax.axhline(np.mean(p90_values), color='green', linestyle='--', alpha=0.5, 
                  label=f'Avg P90: {np.mean(p90_values):.4f}')
        
        # Set labels and title
        ax.set_xlabel('Time Index')
        ax.set_ylabel('Error Metric')
        ax.set_title(f'Error Metrics Across Time Points (x: {x_lb}D to {x_ub}D)')
        ax.legend()
        ax.grid(True)
        
        plt.tight_layout()
        plt.savefig(output_file)
        plt.close(fig)
    
    def plot_parameter_comparison(self, best_params, defaults, best_rmse, x_lb, x_ub):
        """
        Plot comparison between best and default parameters.
        
        Parameters:
        -----------
        best_params : dict
            Best parameters found by optimization
        defaults : dict
            Default parameter values
        best_rmse : float
            Best RMSE value
        x_lb : float
            Lower bound for x in units of turbine diameter
        x_ub : float
            Upper bound for x in units of turbine diameter
        """
        # Create bar plot of parameters
        best_vals = []
        default_vals = []
        keys = best_params.keys()
        
        for key in keys:
            best_vals.append(best_params[key])
            default_vals.append(defaults[key])
        
        plt.figure(figsize=(12, 6))
        plt.bar(keys, best_vals)
        plt.bar(keys, default_vals,
              edgecolor='black',
              linewidth=2,
              color='none',
              capstyle='butt')
        plt.title(f'Optimal RMSE: {best_rmse:.4f}')
        plt.tight_layout()
        plt.savefig(f'{self.output_dir}/parameter_comparison_LB_{x_lb}_UP_{x_ub}.png')
        plt.close('all')


class WindFarmAnalysis:
    """
    Main class for wind farm analysis, combining all components.
    """
    def __init__(self, model_type=2, downwind=True, data_path='./DTU10MW.nc', output_dir='figs'):
        """
        Initialize wind farm analysis with all components.
        
        Parameters:
        -----------
        model_type : int
            Type of model to use: 1 for BlondelSuperGaussianDeficit2020, 2 for TurboGaussianDeficit
        downwind : bool
            Whether to analyze downwind (True) or upwind (False) effects
        data_path : str
            Path to the data file containing wind turbine data
        output_dir : str
            Directory to save output visualizations
        """
        # Initialize components
        self.data_loader = DataLoader(data_path)
        self.model_config = ModelConfiguration(model_type, downwind)
        self.model_factory = WindFarmModelFactory()
        self.wind_data_generator = WindDataGenerator()
        self.visualizer = WindFarmVisualizer(output_dir)
        
        # Initialize optimizer
        self.optimizer = WindFarmOptimizer(
            self.data_loader, 
            self.model_config, 
            self.model_factory, 
            self.wind_data_generator
        )
        
        # Extract some common properties for easier access
        self.flow_roi = self.optimizer.flow_roi
        self.target_x = self.optimizer.target_x
        self.target_y = self.optimizer.target_y
        self.X_LB = self.optimizer.X_LB
        self.X_UB = self.optimizer.X_UB
        self.full_ws = self.optimizer.full_ws
        self.full_ti = self.optimizer.full_ti
    
    def run_optimization(self, init_points=50, n_iter=200, random_state=1):
        """
        Run the optimization process.
        
        Parameters:
        -----------
        init_points : int
            Number of initial points for Bayesian optimization
        n_iter : int
            Number of iterations for Bayesian optimization
        random_state : int
            Random seed for reproducibility
            
        Returns:
        --------
        tuple
            (best_params, best_rmse)
        """
        # Run optimization
        bayes_opt, best_params, best_rmse = self.optimizer.optimize(
            init_points, n_iter, random_state
        )
        
        # Store results
        self.bayes_opt = bayes_opt
        self.best_params = best_params
        self.best_rmse = best_rmse
        
        # Visualize optimization process
        self.visualizer.visualize_optimization(
            bayes_opt, 
            self.model_config.defaults,
            f'{self.visualizer.output_dir}/optimization_animation_{self.X_LB}_{self.X_UB}.mp4'
        )
        
        return best_params, best_rmse
    
    def evaluate_best_model(self):
        """
        Evaluate the model with the best parameters and plot results.
        
        Returns:
        --------
        dict
            Summary of error metrics
        """
        if not hasattr(self, 'best_params'):
            raise ValueError("Optimization must be run before evaluation")
        
        # Create the best wind farm model
        wfm = self.model_factory.create_model(
            self.model_config.MODEL, 
            self.model_config.DOWNWIND, 
            self.best_params
        )
        
        # Run simulation with the best parameters
        sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                     wd=[270] * self.full_ti.size, time=True)
        
        # Plot flow fields and collect metrics for each time point
        error_metrics = []
        for t in range(sim_res.time.size):
            metrics = self.visualizer.plot_flow_fields(
                sim_res=sim_res,
                observed_data=self.flow_roi.deficits,
                target_x=self.target_x,
                target_y=self.target_y,
                time_idx=t,
                prefix='flow_field'
            )
            error_metrics.append(metrics)
        
        # Plot error statistics
        self.visualizer.plot_error_statistics(error_metrics, self.X_LB, self.X_UB)
        
        # Plot parameter comparison
        self.visualizer.plot_parameter_comparison(
            self.best_params, 
            self.model_config.defaults, 
            self.best_rmse,
            self.X_LB,
            self.X_UB
        )
        
        # Calculate overall metrics
        overall_metrics = {
            'rmse': np.mean([m['rmse'] for m in error_metrics]),
            'mae': np.mean([m['mae'] for m in error_metrics]),
            'p90_error': np.mean([m['p90_error'] for m in error_metrics])
        }
        
        # Print summary
        print(f"Error metrics summary:")
        for key, value in overall_metrics.items():
            print(f"  {key}: {value:.4f}")
        
        return overall_metrics


def main():
    """Main function to run the wind farm analysis"""
    # Configure the analysis
    model_type = 2  # 1 for BlondelSuperGaussianDeficit2020, 2 for TurboGaussianDeficit
    downwind = True  # True for downwind analysis, False for upwind
    
    # Create and run the analysis
    analysis = WindFarmAnalysis(
        model_type=model_type, 
        downwind=downwind,
        data_path='./DTU10MW.nc',
        output_dir='figs'
    )
    
    # Run optimization
    best_params, best_rmse = analysis.run_optimization(init_points=50, n_iter=200)
    print(f"Best parameters: {best_params}")
    print(f"Best RMSE: {best_rmse}")
    
    # Evaluate best model
    overall_metrics = analysis.evaluate_best_model()
    print(f"Overall metrics: {overall_metrics}")


if __name__ == "__main__":
    main()



I've completely rewritten your code to make it much more modular and easier to maintain. Here are the key improvements:
Key Improvements

Modular Design: Split functionality into specialized classes with single responsibilities:

DataLoader: Handles loading and preparing wind turbine data
ModelConfiguration: Manages model parameters and bounds setup
WindFarmModelFactory: Creates wind farm models with different configurations
WindDataGenerator: Generates wind speed and turbulence intensity data
WindFarmOptimizer: Handles optimization of model parameters
WindFarmVisualizer: Visualizes results with enhanced plotting
WindFarmAnalysis: Main class that orchestrates all components


Improved Flow Field Plots: As you requested, I've enhanced the flow field visualization:

Added clearer contour plots with consistent colormaps
Included statistical metrics for each plot (RMSE, MAE, P90)
Added dedicated plotting of error statistics across time points


Enhanced Error Reporting:

Now properly calculates and reports p90 errors in addition to RMSE
Produces summary statistics across all time points
Visualizes error metrics in dedicated plots


Better Parameter Organization:

Separated parameter configuration from model creation
Maintained all deficit settings and MODEL/UPSTREAM logic
Made parameter initialization more consistent



How to Use the New Code
The main entry point is the WindFarmAnalysis class, which coordinates all operations:

