I've taken a look at your wind farm wake modeling optimization code. I can see you're using PyWake to optimize wake deficit models and evaluate their performance against reference data.
Let me help reorganize this code into a more modular structure while preserving the key functionality. I'll focus on:

Better modularization of the wind farm model (WFM) instantiation
Improving the flow field plots to report averages and p90s of errors
Maintaining all deficit settings and the MODEL/UPSTREAM logic

Here's a comprehensive rewrite:

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import xarray as xr
import os
from datetime import datetime
from pathlib import Path

# PyWake imports
from py_wake.rotor_avg_models.gaussian_overlap_model import GaussianOverlapAvgModel
from py_wake.deficit_models.gaussian import TurboGaussianDeficit
from py_wake.examples.data.dtu10mw._dtu10mw import DTU10MW
from py_wake.deficit_models.gaussian import BlondelSuperGaussianDeficit2020
from py_wake import HorizontalGrid
from py_wake.deflection_models import JimenezWakeDeflection
from py_wake.turbulence_models import CrespoHernandez
from py_wake.rotor_avg_models import RotorCenter
from py_wake.deficit_models import SelfSimilarityDeficit2020
from py_wake.wind_farm_models import PropagateDownwind, All2AllIterative
from py_wake.superposition_models import LinearSum
from py_wake.ground_models import Mirror
from py_wake.examples.data.hornsrev1 import Hornsrev1Site
from py_wake.deficit_models.utils import ct2a_mom1d

# Bayesian optimization
from bayes_opt import BayesianOptimization


class WakeModelOptimizer:
    """Class for optimizing wake deficit models using Bayesian optimization."""
    
    def __init__(self, data_path='./DTU10MW.nc', model_type=2, downwind=True, 
                 x_bounds=None, y_bounds=None, output_dir="results"):
        """
        Initialize the WakeModelOptimizer.
        
        Parameters:
        -----------
        data_path : str
            Path to the data file.
        model_type : int
            Type of model to use (1 or 2).
        downwind : bool
            Whether to use downwind or upwind configuration.
        x_bounds : tuple
            Optional x bounds (min, max) in terms of turbine diameters.
        y_bounds : tuple
            Optional y bounds (min, max) in terms of turbine diameters.
        output_dir : str
            Directory for saving outputs.
        """
        # Configuration parameters
        self.MODEL = model_type
        self.DOWNWIND = downwind
        self.output_dir = output_dir
        
        # Make sure output directories exist
        Path(output_dir).mkdir(exist_ok=True)
        Path(f"{output_dir}/figs").mkdir(exist_ok=True)
        
        # Load data and setup
        self._setup_turbine_and_roi(data_path, x_bounds, y_bounds)
        self._setup_simulation_conditions()
        self._setup_site()
        self._initialize_reference_data()
        
        # Initialize model parameters
        self._initialize_model_parameters()
        
    def _setup_turbine_and_roi(self, data_path, x_bounds=None, y_bounds=None):
        """Setup turbine and region of interest."""
        # Load dataset
        self.dat = xr.load_dataset(data_path)
        self.turbine = DTU10MW()
        self.D = self.turbine.diameter()
        
        # Assign coordinates scaled by turbine diameter
        self.dat = self.dat.assign_coords(x=self.dat.x * self.D, y=self.dat.y * self.D)
        
        # Set region of interest based on DOWNWIND setting
        if x_bounds is None:
            if self.DOWNWIND:
                self.X_LB, self.X_UB = 2, 10
            else:
                self.X_LB, self.X_UB = -2, -1
        else:
            self.X_LB, self.X_UB = x_bounds
            
        if y_bounds is None:
            self.Y_LB, self.Y_UB = -2, 2
        else:
            self.Y_LB, self.Y_UB = y_bounds
            
        # Define region of interest slices
        roi_x = slice(self.X_LB * self.D, self.X_UB * self.D)
        roi_y = slice(self.Y_LB * self.D, self.Y_UB * self.D)
        
        # Get flow in the region of interest
        self.flow_roi = self.dat.sel(x=roi_x, y=roi_y)
        self.target_x = self.flow_roi.x
        self.target_y = self.flow_roi.y
        
    def _setup_simulation_conditions(self):
        """Setup wind speeds and turbulence intensities for simulation."""
        # Define turbulence intensities and wind speeds
        self.TIs = np.arange(0.05, 0.45, 0.05)
        self.WSs = np.arange(4, 11)
        
        # Create arrays of TI and WS values for each simulation
        full_ti = [self.TIs for _ in range(self.WSs.size)]
        self.full_ti = np.array(full_ti).flatten()
        
        full_ws = [[self.WSs[ii]] * self.TIs.size for ii in range(self.WSs.size)]
        self.full_ws = np.array(full_ws).flatten()
        
        assert (self.full_ws.size == self.full_ti.size)
        
    def _setup_site(self):
        """Setup the wind farm site."""
        self.site = Hornsrev1Site()
        
    def _initialize_reference_data(self):
        """Initialize reference data for comparison."""
        # Initialize a wake model with default settings to get reference data
        sim_res = All2AllIterative(
            self.site, self.turbine,
            wake_deficitModel=BlondelSuperGaussianDeficit2020(),
            superpositionModel=LinearSum(), 
            deflectionModel=None,
            turbulenceModel=CrespoHernandez(),
            blockage_deficitModel=SelfSimilarityDeficit2020()
        )([0], [0], ws=self.full_ws, TI=self.full_ti, wd=[270] * self.full_ti.size, time=True)
        
        # Create flow map for the region of interest
        self.flow_map = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y))
        
        # Get observed deficit values for each time step
        obs_values = []
        for t in range(self.flow_map.time.size):
            this_pred_sim = sim_res.isel(time=t, wt=0)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_pred_sim.CT, ti=this_pred_sim.TI, z=0)
            obs_values.append(observed_deficit.T)
        
        # Concatenate all observed values
        self.all_obs = xr.concat(obs_values, dim='time')
        
    def _initialize_model_parameters(self):
        """Initialize model parameters and bounds based on model type and configuration."""
        # Set default parameters and bounds based on the model type and downwind setting
        if self.MODEL == 1:
            if self.DOWNWIND:
                self.defaults = {
                    'a_s': 0.17, 'b_s': 0.005, 'c_s': 0.2, 'b_f': -0.68, 'c_f': 2.41,
                    'ch1': 0.73, 'ch2': 0.8325, 'ch3': -0.0325, 'ch4': -0.32
                }
                self.pbounds = {
                    'a_s': (0.001, 0.5),
                    'b_s': (0.001, 0.01),
                    'c_s': (0.001, 0.5),
                    'b_f': (-2, 1),
                    'c_f': (0.1, 5),
                    'ch1': (-1, 2),
                    'ch2': (-1, 2),
                    'ch3': (-1, 2),
                    'ch4': (-1, 2),
                }
            else:
                self.defaults = {
                    'ss_alpha': 0.8888888888888888,
                    'ss_beta': 1.4142135623730951,
                    'rp1': -0.672,
                    'rp2': 0.4897,
                    'ng1': -1.381,
                    'ng2': 2.627,
                    'ng3': -1.524,
                    'ng4': 1.336,
                    'fg1': -0.06489,
                    'fg2': 0.4911,
                    'fg3': 1.116,
                    'fg4': -0.1577
                }
                self.pbounds = {
                    'ss_alpha': (0.05, 3),
                    'ss_beta': (0.05, 3),
                    'rp1': (-2, 2),
                    'rp2': (-2, 2),
                    'ng1': (-3, 3),
                    'ng2': (-3, 3),
                    'ng3': (-3, 3),
                    'ng4': (-3, 3),
                    'fg1': (-2, 2),
                    'fg2': (-2, 2),
                    'fg3': (-2, 2),
                    'fg4': (-2, 2)
                }
        else:  # MODEL == 2
            self.defaults = {
                'A': 0.04,
                'cti1': 1.5,
                'cti2': 0.8,
                'ceps': 0.25,
                'ctlim': 0.999,
                'ch1': 0.73,
                'ch2': 0.8325,
                'ch3': -0.0325,
                'ch4': -0.3
            }
            self.pbounds = {
                'A': (0.001, .5),
                'cti1': (.01, 5),
                'cti2': (0.01, 5),
                'ceps': (0.01, 3),
                'ctlim': (0.01, 1),
                'ch1': (-1, 2),
                'ch2': (-1, 2),
                'ch3': (-1, 2),
                'ch4': (-1, 2),
            }
            
    def create_wind_farm_model(self, params):
        """
        Create a wind farm model with the specified parameters.
        
        Parameters:
        -----------
        params : dict
            Dictionary of model parameters
            
        Returns:
        --------
        wfm : All2AllIterative
            Wind farm model
        """
        # Initialize empty arguments
        def_args = {}
        turb_args = {}
        blockage_args = {}
        
        # Configure models based on downwind setting and model type
        if self.DOWNWIND:
            if self.MODEL == 1:
                # BlondelSuperGaussianDeficit2020 for downwind Model 1
                def_args = {k: params[k] for k in ['a_s', 'b_s', 'c_s', 'b_f', 'c_f']}
                turb_args = {'c': np.array([params['ch1'], params['ch2'], params['ch3'], params['ch4']])}
                wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
            else:
                # TurboGaussianDeficit for downwind Model 2
                turb_args = {'c': np.array([params['ch1'], params['ch2'], params['ch3'], params['ch4']])}
                wake_deficitModel = TurboGaussianDeficit(
                    A=params['A'], 
                    cTI=[params['cti1'], params['cti2']],
                    ctlim=params['ctlim'], 
                    ceps=params['ceps'],
                    ct2a=ct2a_mom1d,
                    groundModel=Mirror(),
                    rotorAvgModel=GaussianOverlapAvgModel()
                )
                wake_deficitModel.WS_key = 'WS_jlk'
        else:
            # Configuration for upwind (blockage) models
            wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
            blockage_args = {
                'ss_alpha': params['ss_alpha'], 
                'ss_beta': params['ss_beta'], 
                'r12p': np.array([params['rp1'], params['rp2']]), 
                'ngp': np.array([params['ng1'], params['ng2'], params['ng3'], params['ng4']])
            }
            if self.MODEL == 2:
                blockage_args['groundModel'] = Mirror()
        
        # Create and return the wind farm model
        wfm = All2AllIterative(
            self.site, 
            self.turbine,
            wake_deficitModel=wake_deficitModel,
            superpositionModel=LinearSum(), 
            deflectionModel=None,
            turbulenceModel=CrespoHernandez(**turb_args),
            blockage_deficitModel=SelfSimilarityDeficit2020(**blockage_args)
        )
        
        return wfm
    
    def evaluate_rmse(self, **kwargs):
        """
        Evaluate RMSE for a given set of parameters.
        
        Parameters:
        -----------
        **kwargs : dict
            Model parameters
            
        Returns:
        --------
        float
            Negative RMSE (for maximization in Bayesian optimization)
        """
        # Create wind farm model with the parameters
        wfm = self.create_wind_farm_model(kwargs)
        
        # Run simulation
        sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                      wd=[270] * self.full_ti.size, time=True)
        
        # Create flow map
        flow_map = None
        for tt in range(self.full_ws.size):
            fm = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y), 
                                  time=[tt])['WS_eff']
            if flow_map is None:
                flow_map = fm
            else:
                flow_map = xr.concat([flow_map, fm], dim='time')
        
        # Calculate prediction and RMSE
        pred = (sim_res.WS - flow_map.isel(h=0)) / sim_res.WS
        rmse = float(np.sqrt(((self.all_obs - pred) ** 2).mean(['x', 'y'])).mean('time'))
        
        # Return negative RMSE for maximization
        if np.isnan(rmse): 
            return -0.5
        return -rmse
    
    def run_optimization(self, init_points=50, n_iter=200):
        """
        Run Bayesian optimization to find optimal parameters.
        
        Parameters:
        -----------
        init_points : int
            Number of initial random points
        n_iter : int
            Number of optimization iterations
            
        Returns:
        --------
        tuple
            (best_params, best_rmse, optimizer)
        """
        # Initialize optimizer
        optimizer = BayesianOptimization(
            f=self.evaluate_rmse, 
            pbounds=self.pbounds, 
            random_state=1
        )
        
        # Probe default parameters
        optimizer.probe(params=self.defaults, lazy=True)
        
        # Run optimization
        optimizer.maximize(init_points=init_points, n_iter=n_iter)
        
        # Get best parameters and RMSE
        best_params = optimizer.max['params']
        best_rmse = -optimizer.max['target']
        
        self.best_params = best_params
        self.best_rmse = best_rmse
        self.optimizer = optimizer
        
        return best_params, best_rmse, optimizer
    
    def create_optimization_animation(self):
        """Create animation of the optimization process."""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Function to update plot for each frame
        def update_plot(frame):
            ax1.clear()
            ax2.clear()
            
            # Get the best parameters and corresponding RMSE up to the current frame
            best_so_far_params = {}
            best_so_far_rmse = float('inf')
            best_so_far_rmses = []
            
            for i in range(frame + 1):
                if -self.optimizer.space.target[i] <= best_so_far_rmse:
                    best_so_far_rmse = -self.optimizer.space.target[i]
                    best_so_far_params = self.optimizer.res[i]['params']
                best_so_far_rmses.append(best_so_far_rmse)
            
            # Plot the entire history in gray
            ax1.plot(-np.array(self.optimizer.space.target), color='gray', alpha=0.5)
            # Plot the best RMSE so far in black
            ax1.plot(np.array(best_so_far_rmses), color='black')
            ax1.set_title('Optimization Convergence')
            ax1.set_xlabel('Iteration')
            ax1.set_ylabel('RMSE')
            ax1.grid(True)
            
            # Use the best parameters so far for the bar plot
            keys = list(best_so_far_params.keys())
            best_vals = []
            default_vals = []
            
            for key in keys:
                best_vals.append(best_so_far_params[key])
                default_vals.append(self.defaults[key])
            
            ax2.bar(keys, best_vals, label='Optimized')
            ax2.bar(keys, default_vals, edgecolor='black', linewidth=2, 
                   color='none', capstyle='butt', label='Default')
            ax2.set_title(f'Best RMSE: {best_so_far_rmse:.4f}')
            ax2.tick_params(axis='x', rotation=45)
            ax2.legend()
            
            plt.tight_layout()
            return ax1, ax2
        
        # Create animation
        ani = animation.FuncAnimation(
            fig, update_plot, 
            frames=len(self.optimizer.space.target), 
            repeat=False
        )
        
        # Save as MP4
        filename = f'{self.output_dir}/optimization_animation_{self.X_LB}_{self.X_UB}.mp4'
        writer = animation.FFMpegWriter(fps=15)
        ani.save(filename, writer=writer)
        plt.close('all')
        
        return filename
    
    def evaluate_final_model(self):
        """
        Evaluate the final model with the best parameters and generate visualizations.
        
        Returns:
        --------
        dict
            Dictionary with error statistics
        """
        # Create wind farm model with best parameters
        wfm = self.create_wind_farm_model(self.best_params)
        
        # Run simulation
        sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                      wd=[270] * self.full_ti.size, time=True)
        
        # Create flow map
        flow_map = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y))
        
        # Calculate errors and plot for each time step
        rmse_values = []
        mae_values = []
        p90_errors = []
        
        for t in range(flow_map.time.size):
            # Get predicted and observed values
            this_pred_sim = sim_res.isel(time=t)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_pred_sim.CT, ti=this_pred_sim.TI, z=0).isel(wt=0)
            
            # Calculate predicted deficit
            pred = (this_pred_sim.WS - flow_map.WS_eff.isel(h=0, time=t)) / this_pred_sim.WS
            
            # Calculate difference and metrics
            diff = observed_deficit.T - pred
            rmse = np.sqrt(np.mean(diff**2))
            mae = np.mean(np.abs(diff))
            p90_error = np.percentile(np.abs(diff.values.flatten()), 90)
            
            rmse_values.append(rmse)
            mae_values.append(mae)
            p90_errors.append(p90_error)
            
            # Create plots
            fig, ax = plt.subplots(3, 1, figsize=(8, 15))
            
            # Observed deficit
            co = ax[0].contourf(self.target_x, self.target_y, observed_deficit.T)
            cp = ax[1].contourf(self.target_x, self.target_y, pred)
            cd = ax[2].contourf(self.target_x, self.target_y, diff)
            
            for jj, c in enumerate([co, cp, cd]):
                fig.colorbar(c, ax=ax[jj])
            
            ax[0].set_ylabel('Observed')
            ax[0].set_title(f'Time Step {t}: WS={self.full_ws[t]}, TI={self.full_ti[t]:.2f}')
            ax[1].set_ylabel('Prediction')
            ax[2].set_ylabel('Difference')
            ax[2].set_xlabel('x/D')
            
            # Add error metrics to the plot
            ax[2].text(0.02, 0.98, 
                       f'RMSE: {rmse:.4f}\nMAE: {mae:.4f}\nP90 Error: {p90_error:.4f}',
                       transform=ax[2].transAxes, 
                       verticalalignment='top',
                       bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
            
            plt.tight_layout()
            plt.savefig(f'{self.output_dir}/figs/flow_field_comparison_{t}.png')
            plt.close()
        
        # Calculate overall metrics
        overall_rmse = np.mean(rmse_values)
        overall_mae = np.mean(mae_values)
        overall_p90 = np.mean(p90_errors)
        
        # Create parameter comparison bar plot
        plt.figure(figsize=(12, 6))
        keys = self.best_params.keys()
        best_vals = [self.best_params[key] for key in keys]
        default_vals = [self.defaults[key] for key in keys]
        
        plt.bar(keys, best_vals, label='Optimized')
        plt.bar(keys, default_vals,
                edgecolor='black',
                linewidth=2,
                color='none',
                capstyle='butt',
                label='Default')
        
        plt.title(f'Parameter Comparison (Optimal RMSE: {self.best_rmse:.4f})')
        plt.legend()
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig(f'{self.output_dir}/parameter_comparison_{self.X_LB}_{self.X_UB}.png')
        plt.close()
        
        # Create error metrics summary plot
        fig, ax = plt.subplots(1, 3, figsize=(15, 5))
        
        # RMSE plot
        ax[0].plot(range(len(rmse_values)), rmse_values, 'o-')
        ax[0].set_title(f'RMSE by Time Step (Mean: {overall_rmse:.4f})')
        ax[0].set_xlabel('Time Step')
        ax[0].set_ylabel('RMSE')
        ax[0].axhline(y=overall_rmse, color='r', linestyle='--')
        ax[0].grid(True)
        
        # MAE plot
        ax[1].plot(range(len(mae_values)), mae_values, 'o-')
        ax[1].set_title(f'MAE by Time Step (Mean: {overall_mae:.4f})')
        ax[1].set_xlabel('Time Step')
        ax[1].set_ylabel('MAE')
        ax[1].axhline(y=overall_mae, color='r', linestyle='--')
        ax[1].grid(True)
        
        # P90 Error plot
        ax[2].plot(range(len(p90_errors)), p90_errors, 'o-')
        ax[2].set_title(f'P90 Error by Time Step (Mean: {overall_p90:.4f})')
        ax[2].set_xlabel('Time Step')
        ax[2].set_ylabel('P90 Error')
        ax[2].axhline(y=overall_p90, color='r', linestyle='--')
        ax[2].grid(True)
        
        plt.tight_layout()
        plt.savefig(f'{self.output_dir}/error_metrics_summary.png')
        plt.close()
        
        # Return error statistics
        error_stats = {
            'rmse_values': rmse_values,
            'mae_values': mae_values,
            'p90_errors': p90_errors,
            'overall_rmse': overall_rmse,
            'overall_mae': overall_mae,
            'overall_p90': overall_p90
        }
        
        return error_stats

# Example usage
def main():
    # Create a timestamp for unique output directory
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = f"results_{timestamp}"
    
    # Create optimizer with model type 2 and downwind configuration
    optimizer = WakeModelOptimizer(
        data_path='./DTU10MW.nc',
        model_type=2,
        downwind=True,
        output_dir=output_dir
    )
    
    # Run optimization with fewer iterations for demonstration
    print("Running optimization...")
    best_params, best_rmse, _ = optimizer.run_optimization(init_points=10, n_iter=20)
    
    # Create animation of optimization process
    print("Creating optimization animation...")
    animation_file = optimizer.create_optimization_animation()
    
    # Evaluate final model and generate visualizations
    print("Evaluating final model...")
    error_stats = optimizer.evaluate_final_model()
    
    # Print results
    print(f"\nOptimization Results:")
    print(f"Best RMSE: {best_rmse:.6f}")
    print(f"Overall MAE: {error_stats['overall_mae']:.6f}")
    print(f"Overall P90 Error: {error_stats['overall_p90']:.6f}")
    print(f"\nBest Parameters:")
    for key, value in best_params.items():
        print(f"  {key}: {value:.6f}")
    
    print(f"\nResults saved to {output_dir}/")

if __name__ == "__main__":
    main()


This rewrite should make it much easier to work with the code, understand the flow, and extend it for further analysis. The enhanced error reporting (averages and p90s) will provide better insights into model performance.
Would you like me to explain any specific part of the rewritten code in more detail?
