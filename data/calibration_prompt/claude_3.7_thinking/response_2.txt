I've looked through your wind farm wake modeling code using PyWake. You're right that it could benefit from better modularization, particularly around how the wind farm model (wfm) is instantiated. I'll help you rewrite it with a cleaner, more maintainable structure while preserving all the deficit settings, MODEL, and UPSTREAM logic.
Let me create a modular version that:

Maintains all your functionality
Improves organization with clear separation of concerns
Makes it easier to change flow field plots and error reporting
Keeps the key logic for deficit settings, MODEL parameter, and UPSTREAM/DOWNSTREAM handling

"""
Modularized Wind Farm Wake Modeling and Optimization

This code simulates wind farm wake models using PyWake and optimizes model parameters
to match reference data. The structure is organized into modules for:
1. Configuration
2. Data handling
3. Model creation
4. Optimization
5. Visualization
6. Main execution

Note: flow_map.WS_eff represents velocity while reference data has velocity deficits
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import xarray as xr
from py_wake.rotor_avg_models.gaussian_overlap_model import GaussianOverlapAvgModel
from py_wake.deficit_models.gaussian import TurboGaussianDeficit, BlondelSuperGaussianDeficit2020
from py_wake.examples.data.dtu10mw._dtu10mw import DTU10MW
from py_wake import HorizontalGrid
from py_wake.deflection_models import JimenezWakeDeflection
from py_wake.turbulence_models import CrespoHernandez
from py_wake.rotor_avg_models import RotorCenter
from py_wake.deficit_models import SelfSimilarityDeficit2020
from py_wake.wind_farm_models import PropagateDownwind, All2AllIterative
from py_wake.superposition_models import LinearSum
from py_wake.ground_models import Mirror
from py_wake.examples.data.hornsrev1 import Hornsrev1Site
from bayes_opt import BayesianOptimization
from py_wake.deficit_models.utils import ct2a_mom1d
import os
from pathlib import Path


# ========================= Configuration Module =========================

class Config:
    """Configuration settings for the wind farm simulation and optimization."""
    
    def __init__(self, model=2, downwind=True):
        """
        Initialize configuration settings.
        
        Parameters:
        -----------
        model : int
            Model type (1 or 2)
        downwind : bool
            Whether to simulate downwind (True) or upwind (False)
        """
        # Validate model choice
        if model not in {1, 2}:
            raise ValueError("Model must be either 1 or 2")
        
        self.MODEL = model
        self.DOWNWIND = downwind
        
        # Set region of interest based on downwind/upwind setting
        if self.DOWNWIND:
            self.X_LB = 2
            self.X_UB = 10
        else:
            self.X_LB = -2
            self.X_UB = -1
        
        # Define the parameter bounds and defaults based on model and direction
        self._set_parameter_bounds()
        self._set_default_parameters()
        
        # Data file and output locations
        self.data_file = './DTU10MW.nc'
        self.output_dir = 'figs'
        self.ensure_output_dir_exists()
        
        # Simulation settings
        self.ws_range = np.arange(4, 11)        # Wind speeds
        self.ti_range = np.arange(0.05, 0.45, 0.05)  # Turbulence intensities
        self.wind_direction = 270               # Wind direction in degrees
        
    def _set_parameter_bounds(self):
        """Set the parameter bounds for optimization based on model and direction."""
        if self.MODEL == 1:
            if self.DOWNWIND:
                self.pbounds = {
                    'a_s': (0.001, 0.5),
                    'b_s': (0.001, 0.01),
                    'c_s': (0.001, 0.5),
                    'b_f': (-2, 1),
                    'c_f': (0.1, 5),
                    'ch1': (-1, 2),
                    'ch2': (-1, 2),
                    'ch3': (-1, 2),
                    'ch4': (-1, 2),
                }
            else:
                self.pbounds = {
                    'ss_alpha': (0.05, 3),
                    'ss_beta': (0.05, 3),
                    'rp1': (-2, 2),
                    'rp2': (-2, 2),
                    'ng1': (-3, 3),
                    'ng2': (-3, 3),
                    'ng3': (-3, 3),
                    'ng4': (-3, 3),
                    'fg1': (-2, 2),
                    'fg2': (-2, 2),
                    'fg3': (-2, 2),
                    'fg4': (-2, 2)
                }
        else:  # MODEL == 2
            self.pbounds = {
                'A': (0.001, .5),
                'cti1': (.01, 5),
                'cti2': (0.01, 5),
                'ceps': (0.01, 3),
                'ctlim': (0.01, 1),
                'ch1': (-1, 2),
                'ch2': (-1, 2),
                'ch3': (-1, 2),
                'ch4': (-1, 2),
            }
    
    def _set_default_parameters(self):
        """Set the default parameters based on model and direction."""
        if self.MODEL == 1:
            if self.DOWNWIND:
                self.defaults = {
                    'a_s': 0.17, 
                    'b_s': 0.005, 
                    'c_s': 0.2, 
                    'b_f': -0.68, 
                    'c_f': 2.41,
                    'ch1': 0.73, 
                    'ch2': 0.8325, 
                    'ch3': -0.0325, 
                    'ch4': -0.32
                }
            else:
                self.defaults = {
                    'ss_alpha': 0.8888888888888888,
                    'ss_beta': 1.4142135623730951,
                    'rp1': -0.672,
                    'rp2': 0.4897,
                    'ng1': -1.381,
                    'ng2': 2.627,
                    'ng3': -1.524,
                    'ng4': 1.336,
                    'fg1': -0.06489,
                    'fg2': 0.4911,
                    'fg3': 1.116,
                    'fg4': -0.1577
                }
        else:  # MODEL == 2
            self.defaults = {
                'A': 0.04,
                'cti1': 1.5,
                'cti2': 0.8,
                'ceps': 0.25,
                'ctlim': 0.999,
                'ch1': 0.73,
                'ch2': 0.8325,
                'ch3': -0.0325,
                'ch4': -0.3
            }
    
    def ensure_output_dir_exists(self):
        """Create output directory if it doesn't exist."""
        Path(self.output_dir).mkdir(parents=True, exist_ok=True)
    
    def get_animation_filename(self):
        """Generate animation filename based on model and ROI settings."""
        return f'optimization_animation_{self.X_LB}_{self.X_UB}.mp4'
    
    def get_bar_plot_filename(self):
        """Generate bar plot filename based on model and ROI settings."""
        return f'bar_LB_{self.X_LB}_UP_{self.X_UB}.png'


# ========================= Data Module =========================

class WindFarmData:
    """Data loading and preparation for wind farm simulations."""
    
    def __init__(self, config):
        """
        Initialize the data handler.
        
        Parameters:
        -----------
        config : Config
            Configuration settings
        """
        self.config = config
        self.turbine = DTU10MW()
        self.site = Hornsrev1Site()
        self.D = self.turbine.diameter()
        
        # Load and process the turbine data
        self._load_data()
        self._prepare_simulation_inputs()
    
    def _load_data(self):
        """Load the dataset and set up the region of interest."""
        self.dat = xr.load_dataset(self.config.data_file)
        
        # Convert coordinates from rotor diameters to meters
        self.dat = self.dat.assign_coords(x=self.dat.x * self.D, y=self.dat.y * self.D)
        
        # Define region of interest based on configuration
        roi_x = slice(self.config.X_LB * self.D, self.config.X_UB * self.D)
        roi_y = slice(-2 * self.D, 2 * self.D)
        
        # Extract the region of interest
        self.flow_roi = self.dat.sel(x=roi_x, y=roi_y)
        self.target_x = self.flow_roi.x
        self.target_y = self.flow_roi.y
    
    def _prepare_simulation_inputs(self):
        """Prepare wind speed and turbulence intensity combinations for simulations."""
        TIs = self.config.ti_range
        WSs = self.config.ws_range
        
        # Create arrays of all wind speed and TI combinations
        full_ti = [TIs for _ in range(WSs.size)]
        self.full_ti = np.array(full_ti).flatten()
        
        full_ws = [[WSs[ii]] * TIs.size for ii in range(WSs.size)]
        self.full_ws = np.array(full_ws).flatten()
        
        assert (self.full_ws.size == self.full_ti.size)
        
        # Create a consistent wind direction array
        self.wind_directions = [self.config.wind_direction] * self.full_ti.size
    
    def get_observed_deficits(self, sim_results):
        """
        Extract observed deficit values that correspond to simulation time points.
        
        Parameters:
        -----------
        sim_results : PyWake simulation results
            The results of a wind farm simulation
        
        Returns:
        --------
        xarray.DataArray
            The observed deficit values at each time point
        """
        obs_values = []
        
        for t in range(sim_results.time.size):
            this_pred_sim = sim_results.isel(time=t, wt=0)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_pred_sim.CT, 
                ti=this_pred_sim.TI, 
                z=0
            )
            obs_values.append(observed_deficit.T)
        
        return xr.concat(obs_values, dim='time')


# ========================= Model Module =========================

class WindFarmModel:
    """Wind farm model builder and simulator."""
    
    def __init__(self, config, data):
        """
        Initialize the wind farm model.
        
        Parameters:
        -----------
        config : Config
            Configuration settings
        data : WindFarmData
            Data handler for the wind farm
        """
        self.config = config
        self.data = data
        self.turbine = data.turbine
        self.site = data.site
    
    def create_model(self, params=None):
        """
        Create a wind farm model with specified parameters.
        
        Parameters:
        -----------
        params : dict, optional
            Parameters for the model components. If None, default parameters are used.
        
        Returns:
        --------
        PyWake wind farm model
            The configured wind farm model
        """
        # Use default parameters if none provided
        if params is None:
            params = self.config.defaults
        
        # Setup model components based on config
        if self.config.DOWNWIND:
            wake_deficitModel, turbulence_args, blockage_args = self._setup_downwind_models(params)
        else:
            wake_deficitModel, turbulence_args, blockage_args = self._setup_upwind_models(params)
        
        # Create wind farm model
        wfm = All2AllIterative(
            self.site, 
            self.turbine,
            wake_deficitModel=wake_deficitModel,
            superpositionModel=LinearSum(), 
            deflectionModel=None,
            turbulenceModel=CrespoHernandez(**turbulence_args),
            blockage_deficitModel=SelfSimilarityDeficit2020(**blockage_args)
        )
        
        return wfm
    
    def _setup_downwind_models(self, params):
        """
        Configure models for downwind simulations.
        
        Parameters:
        -----------
        params : dict
            Parameters for the model components
        
        Returns:
        --------
        tuple
            (wake_deficitModel, turbulence_args, blockage_args)
        """
        if self.config.MODEL == 1:
            # BlondelSuperGaussianDeficit2020 model
            def_args = {k: params[k] for k in ['a_s', 'b_s', 'c_s', 'b_f', 'c_f']}
            wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
        else:
            # TurboGaussianDeficit model
            wake_deficitModel = TurboGaussianDeficit(
                A=params['A'], 
                cTI=[params['cti1'], params['cti2']],
                ctlim=params['ctlim'], 
                ceps=params['ceps'],
                ct2a=ct2a_mom1d,
                groundModel=Mirror(),
                rotorAvgModel=GaussianOverlapAvgModel()
            )
            wake_deficitModel.WS_key = 'WS_jlk'
        
        # Common settings for downwind
        turbulence_args = {'c': np.array([params['ch1'], params['ch2'], params['ch3'], params['ch4']])}
        blockage_args = {}
        
        return wake_deficitModel, turbulence_args, blockage_args
    
    def _setup_upwind_models(self, params):
        """
        Configure models for upwind simulations.
        
        Parameters:
        -----------
        params : dict
            Parameters for the model components
        
        Returns:
        --------
        tuple
            (wake_deficitModel, turbulence_args, blockage_args)
        """
        # Common settings for upwind
        wake_deficitModel = BlondelSuperGaussianDeficit2020()
        turbulence_args = {}
        
        # Blockage args depend on model type
        blockage_args = {
            'ss_alpha': params['ss_alpha'], 
            'ss_beta': params['ss_beta'], 
            'r12p': np.array([params['rp1'], params['rp2']]), 
            'ngp': np.array([params['ng1'], params['ng2'], params['ng3'], params['ng4']])
        }
        
        if self.config.MODEL == 2:
            blockage_args['groundModel'] = Mirror()
        
        return wake_deficitModel, turbulence_args, blockage_args
    
    def run_simulation(self, wfm=None, params=None):
        """
        Run a wind farm simulation.
        
        Parameters:
        -----------
        wfm : PyWake wind farm model, optional
            Wind farm model to use. If None, a new model is created.
        params : dict, optional
            Parameters to use if creating a new model
        
        Returns:
        --------
        PyWake simulation results
            The results of the wind farm simulation
        """
        # Create model if not provided
        if wfm is None:
            wfm = self.create_model(params)
        
        # Run the simulation
        sim_res = wfm(
            [0], [0],
            ws=self.data.full_ws,
            TI=self.data.full_ti,
            wd=self.data.wind_directions,
            time=True
        )
        
        return sim_res
    
    def calculate_flow_map(self, sim_res):
        """
        Calculate flow map for a simulation result.
        
        Parameters:
        -----------
        sim_res : PyWake simulation results
            The results of a wind farm simulation
        
        Returns:
        --------
        xarray.DataArray
            Flow map showing wind speeds across the grid
        """
        return sim_res.flow_map(HorizontalGrid(x=self.data.target_x, y=self.data.target_y))


# ========================= Optimization Module =========================

class WindFarmOptimizer:
    """Optimizer for wind farm model parameters."""
    
    def __init__(self, config, data, model):
        """
        Initialize the optimizer.
        
        Parameters:
        -----------
        config : Config
            Configuration settings
        data : WindFarmData
            Data handler for the wind farm
        model : WindFarmModel
            Wind farm model builder
        """
        self.config = config
        self.data = data
        self.model = model
        
        # Create reference for observed deficits (baseline simulation)
        self._create_baseline_simulation()
    
    def _create_baseline_simulation(self):
        """Run a baseline simulation and extract observed deficits."""
        # Create a baseline wind farm model with default settings
        baseline_wfm = All2AllIterative(
            self.data.site, 
            self.data.turbine,
            wake_deficitModel=BlondelSuperGaussianDeficit2020(),
            superpositionModel=LinearSum(), 
            deflectionModel=None,
            turbulenceModel=CrespoHernandez(),
            blockage_deficitModel=SelfSimilarityDeficit2020()
        )
        
        # Run baseline simulation
        baseline_sim = baseline_wfm(
            [0], [0],
            ws=self.data.full_ws,
            TI=self.data.full_ti,
            wd=self.data.wind_directions,
            time=True
        )
        
        # Calculate flow map
        self.baseline_flow_map = self.model.calculate_flow_map(baseline_sim)
        
        # Extract observed deficits
        self.all_obs = self.data.get_observed_deficits(baseline_sim)
    
    def evaluate_rmse(self, **kwargs):
        """
        Evaluate RMSE between model predictions and observed data.
        
        Parameters:
        -----------
        **kwargs : dict
            Parameters for the wind farm model
        
        Returns:
        --------
        float
            Negative RMSE (for optimization)
        """
        # Create wind farm model with given parameters
        wfm = self.model.create_model(kwargs)
        
        # Run simulation
        sim_res = wfm(
            [0], [0], 
            ws=self.data.full_ws, 
            TI=self.data.full_ti, 
            wd=self.data.wind_directions, 
            time=True
        )
        
        # Calculate flow map for each time step
        flow_map = None
        for tt in range(self.data.full_ws.size):
            fm = sim_res.flow_map(
                HorizontalGrid(x=self.data.target_x, y=self.data.target_y), 
                time=[tt]
            )['WS_eff']
            
            if flow_map is None:
                flow_map = fm
            else:
                flow_map = xr.concat([flow_map, fm], dim='time')
        
        # Calculate predicted deficit
        pred = (sim_res.WS - flow_map.isel(h=0)) / sim_res.WS
        
        # Calculate RMSE
        rmse = float(np.sqrt(((self.all_obs - pred) ** 2).mean(['x', 'y'])).mean('time'))
        
        # Handle NaN results
        if np.isnan(rmse):
            return -0.5
        
        return -rmse
    
    def optimize(self, init_points=50, n_iter=200):
        """
        Perform Bayesian optimization of wind farm model parameters.
        
        Parameters:
        -----------
        init_points : int, optional
            Number of initial random points
        n_iter : int, optional
            Number of optimization iterations
        
        Returns:
        --------
        BayesianOptimization
            The optimizer with results
        """
        # Create Bayesian optimizer
        optimizer = BayesianOptimization(
            f=self.evaluate_rmse, 
            pbounds=self.config.pbounds, 
            random_state=1
        )
        
        # Probe with default parameters
        optimizer.probe(params=self.config.defaults, lazy=True)
        
        # Run optimization
        optimizer.maximize(init_points=init_points, n_iter=n_iter)
        
        # Extract best parameters and RMSE
        self.best_params = optimizer.max['params']
        self.best_rmse = -optimizer.max['target']
        
        return optimizer


# ========================= Visualization Module =========================

class WindFarmVisualizer:
    """Visualizer for wind farm optimization and simulation results."""
    
    def __init__(self, config, data, model):
        """
        Initialize the visualizer.
        
        Parameters:
        -----------
        config : Config
            Configuration settings
        data : WindFarmData
            Data handler for the wind farm
        model : WindFarmModel
            Wind farm model builder
        """
        self.config = config
        self.data = data
        self.model = model
    
    def create_animation(self, optimizer):
        """
        Create an animation of the optimization process.
        
        Parameters:
        -----------
        optimizer : BayesianOptimization
            The optimizer with results
        """
        def update_plot(frame):
            ax1.clear()
            ax2.clear()
            
            # Get the best parameters and RMSE up to the current frame
            best_so_far_params = {}
            best_so_far_rmse = float('inf')
            best_so_far_rmses = []
            
            for i in range(frame + 1):
                if -optimizer.space.target[i] <= best_so_far_rmse:
                    best_so_far_rmse = -optimizer.space.target[i]
                    best_so_far_params = optimizer.res[i]['params']
                best_so_far_rmses.append(best_so_far_rmse)
            
            # Plot the entire history in gray
            ax1.plot(-np.array(optimizer.space.target), color='gray', alpha=0.5)
            
            # Plot the best RMSE so far in black
            ax1.plot(np.array(best_so_far_rmses), color='black')
            ax1.set_title('Optimization Convergence')
            ax1.set_xlabel('Iteration')
            ax1.set_ylabel('RMSE')
            ax1.grid(True)
            
            # Use the best parameters so far for the bar plot
            keys = list(best_so_far_params.keys())
            best_vals = []
            default_vals = []
            
            for key in keys:
                best_vals.append(best_so_far_params[key])
                default_vals.append(self.config.defaults[key])
            
            ax2.bar(keys, best_vals, label='Optimized')
            ax2.bar(
                keys, 
                default_vals,
                edgecolor='black',
                linewidth=2,
                color='none',
                capstyle='butt',
                label='Default'
            )
            ax2.set_title(f'Best RMSE: {best_so_far_rmse:.4f}')
            ax2.tick_params(axis='x', rotation=45)
            ax2.legend()
            
            plt.tight_layout()
            return ax1, ax2
        
        # Create figure and animation
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        ani = animation.FuncAnimation(
            fig, 
            update_plot, 
            frames=len(optimizer.space.target), 
            repeat=False
        )
        
        # Save animation
        writer = animation.FFMpegWriter(fps=15)
        ani.save(self.config.get_animation_filename(), writer=writer)
        plt.close('all')
    
    def plot_parameter_comparison(self, best_params):
        """
        Create a bar plot comparing default and optimized parameters.
        
        Parameters:
        -----------
        best_params : dict
            The best parameters from optimization
        """
        # Extract parameter values
        keys = best_params.keys()
        best_vals = []
        default_vals = []
        
        for key in keys:
            best_vals.append(best_params[key])
            default_vals.append(self.config.defaults[key])
        
        # Create bar plot
        plt.figure(figsize=(12, 6))
        plt.bar(keys, best_vals)
        plt.bar(
            keys, 
            default_vals,
            edgecolor='black',
            linewidth=2,
            color='none',
            capstyle='butt'
        )
        plt.title(f'Optimal RMSE: {self.config.best_rmse:.4f}')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig(self.config.get_bar_plot_filename())
        plt.close()
    
    def plot_flow_field_comparison(self, sim_res, flow_map):
        """
        Plot flow field comparisons for each time step.
        
        Parameters:
        -----------
        sim_res : PyWake simulation results
            Results from wind farm simulation
        flow_map : xarray.DataArray
            Flow map data
            
        Returns:
        --------
        list
            RMSE values for each time step
        """
        rmse_values = []
        mae_values = []
        p90_errors = []
        
        for t in range(flow_map.time.size):
            # Get simulation data for this time step
            this_pred_sim = sim_res.isel(time=t)
            
            # Get observed deficit
            observed_deficit = self.data.flow_roi.deficits.interp(
                ct=this_pred_sim.CT, 
                ti=this_pred_sim.TI, 
                z=0
            ).isel(wt=0)
            
            # Calculate predicted deficit
            pred = (this_pred_sim.WS - flow_map.WS_eff.isel(h=0, time=t)) / this_pred_sim.WS
            
            # Calculate difference and error metrics
            diff = observed_deficit.T - pred
            rmse = np.sqrt(np.mean(diff**2))
            mae = np.mean(np.abs(diff))
            p90_error = np.percentile(np.abs(diff), 90)
            
            rmse_values.append(rmse)
            mae_values.append(mae)
            p90_errors.append(p90_error)
            
            # Create plot
            fig, ax = plt.subplots(3, 1, figsize=(5, 15))
            
            co = ax[0].contourf(self.data.target_x, self.data.target_y, observed_deficit.T)
            cp = ax[1].contourf(self.data.target_x, self.data.target_y, pred)
            cd = ax[2].contourf(self.data.target_x, self.data.target_y, diff)
            
            # Add colorbars
            for jj, c in enumerate([co, cp, cd]):
                fig.colorbar(c, ax=ax[jj])
            
            # Add labels
            ax[0].set_ylabel('Observed')
            ax[1].set_ylabel('Prediction')
            ax[2].set_ylabel('Difference')
            
            # Add title with error metrics
            fig.suptitle(f'Time {t}: RMSE={rmse:.4f}, MAE={mae:.4f}, P90={p90_error:.4f}')
            
            # Save figure
            plt.tight_layout()
            plt.savefig(f'{self.config.output_dir}/flow_field_comparison_{t}.png')
            plt.close()
        
        # Create summary plot of error metrics
        plt.figure(figsize=(10, 6))
        time_indices = range(len(rmse_values))
        
        plt.plot(time_indices, rmse_values, 'o-', label='RMSE')
        plt.plot(time_indices, mae_values, 's-', label='MAE')
        plt.plot(time_indices, p90_errors, '^-', label='P90 Error')
        
        plt.xlabel('Time Step')
        plt.ylabel('Error Metric')
        plt.title('Error Metrics Across Time Steps')
        plt.legend()
        plt.grid(True)
        
        plt.savefig(f'{self.config.output_dir}/error_metrics_summary.png')
        plt.close()
        
        # Print summary statistics
        print(f"Error statistics:")
        print(f"  RMSE: mean={np.mean(rmse_values):.4f}, min={np.min(rmse_values):.4f}, max={np.max(rmse_values):.4f}")
        print(f"  MAE: mean={np.mean(mae_values):.4f}, min={np.min(mae_values):.4f}, max={np.max(mae_values):.4f}")
        print(f"  P90: mean={np.mean(p90_errors):.4f}, min={np.min(p90_errors):.4f}, max={np.max(p90_errors):.4f}")
        
        return rmse_values, mae_values, p90_errors


# ========================= Main Script =========================

def main():
    """Main execution function."""
    # Initialize configuration
    config = Config(model=2, downwind=True)
    
    # Initialize data handler
    data = WindFarmData(config)
    
    # Initialize model builder
    model = WindFarmModel(config, data)
    
    # Initialize optimizer
    optimizer = WindFarmOptimizer(config, data, model)
    
    # Initialize visualizer
    visualizer = WindFarmVisualizer(config, data, model)
    
    # Run optimization
    print("Starting optimization...")
    opt_results = optimizer.optimize(init_points=50, n_iter=200)
    
    # Create animation of optimization process
    print("Creating optimization animation...")
    visualizer.create_animation(opt_results)
    
    # Create parameter comparison plot
    print("Creating parameter comparison plot...")
    visualizer.plot_parameter_comparison(optimizer.best_params)
    
    # Use best parameters to run final simulation
    print("Running final simulation with optimized parameters...")
    best_wfm = model.create_model(optimizer.best_params)
    final_sim_res = model.run_simulation(best_wfm)
    final_flow_map = model.calculate_flow_map(final_sim_res)
    
    # Create flow field comparison plots
    print("Creating flow field comparison plots...")
    rmse_values, mae_values, p90_errors = visualizer.plot_flow_field_comparison(
        final_sim_res, 
        final_flow_map
    )
    
    # Calculate overall RMSE
    overall_rmse = np.mean(rmse_values)
    print(f"Overall RMSE: {overall_rmse}")
    print(f"Best parameters: {optimizer.best_params}")
    
    return {
        "config": config,
        "best_params": optimizer.best_params,
        "best_rmse": optimizer.best_rmse,
        "rmse_values": rmse_values,
        "mae_values": mae_values,
        "p90_errors": p90_errors
    }


if __name__ == "__main__":
    main()



Your code looks like it's modeling wind farm wakes and optimizing parameters to match reference data. I've rewritten it with a much more modular structure that should be easier to maintain and extend.
The new code has these key improvements:

Modular Organization: Structured into distinct classes with clear responsibilities:

Config: Manages all settings and parameters
WindFarmData: Handles data loading and preparation
WindFarmModel: Creates and runs wind farm models
WindFarmOptimizer: Performs parameter optimization
WindFarmVisualizer: Creates plots and animations


Improved Flow Field Visualization: Added the requested average and p90 error reporting, with:

Calculation of RMSE, MAE, and P90 error metrics per time step
Summary plots showing error metrics across all time steps
Detailed contour plots showing observed vs predicted values


Maintained Core Logic: Preserved all the deficit settings and MODEL/UPSTREAM (DOWNWIND) logic you requested
Better Error Reporting: Added comprehensive error statistics for better analysis
Clean Parameter Management: Better organization of parameter bounds and defaults

The main script ties everything together with a clean execution flow. You can easily modify individual components without affecting the rest of the system, which should make future changes much easier.
Would you like me to explain any specific part of the rewrite in more detail?
