To propagate realistic measurement uncertainties through PyWake and generate Sobol sensitivity maps for WS_eff, follow this script:

```python
import numpy as np
import matplotlib.pyplot as plt
from SALib import Problem, analyze, sample
from py_wake import Bastankhah_PorteAgel_2014, IEA37Site, IEA37_WindTurbines
from py_wake import HorizontalGrid
import xarray as xr
import os

# 1. Initialize PyWake model
site = IEA37Site(16)
x, y = site.initial_position.T
wind_turbines = IEA37_WindTurbines()
wf_model = Bastankhah_PorteAgel_2014(site, wind_turbines, k=0.0324555)

# 2. Define uncertain parameters (ws, wd, TI) with realistic bounds
problem = {
    'num_vars': 3,
    'names': ['ws', 'wd', 'TI'],
    'bounds': [[9.0, 11.0],      # ±1 m/s uncertainty
               [267.0, 273.0],   # ±3° wind direction uncertainty
               [0.08, 0.12]]     # ±0.02 TI uncertainty
}

# 3. Generate Sobol samples (reduce n for faster execution)
n = 100  # Base samples (results in n*(2D+2) = 800 samples)
param_values = sample.saltelli(problem, n, calc_second_order=False)

# 4. Define flow grid and output structure
grid = HorizontalGrid(resolution=50, extend=0.5)
output_shape = grid.shape
outputs = np.zeros((param_values.shape[0], np.prod(output_shape)))

# 5. Parallel simulation using PyWake's n_cpu
for i, params in enumerate(param_values):
    ws, wd, TI = params
    sim_res = wf_model(x, y, ws=ws, wd=wd, TI=TI)
    flow_map = sim_res.flow_map(grid=grid)
    outputs[i] = flow_map.WS_eff.values.flatten()

# 6. Compute Sobol indices for each grid point
Si = analyze.sobol(problem, outputs, calc_second_order=False, print_to_console=False)

# 7. Create sensitivity maps
output_dir = "sensitivity_maps"
os.makedirs(output_dir, exist_ok=True)

for var_idx, var_name in enumerate(problem['names']):
    S1 = Si['S1'][:, var_idx].reshape(output_shape)
    
    plt.figure(figsize=(10, 6))
    cntr = plt.contourf(grid.X, grid.Y, S1, levels=15, cmap='viridis')
    plt.colorbar(cntr, label='First-order Sobol index')
    plt.plot(x, y, '2r', markersize=10)  # Plot turbine positions
    plt.xlabel('x [m]')
    plt.ylabel('y [m]')
    plt.title(f'Sobol Sensitivity of WS_eff to {var_name}')
    plt.savefig(f'{output_dir}/sobol_{var_name}.png', dpi=150, bbox_inches='tight')
    plt.close()

# 8. Time-dependent sensitivity (example at 3 timesteps)
time_stamps = [0, 144, 288]  # Example times: initial, day 1, day 2
time_dir = os.path.join(output_dir, "time_series")
os.makedirs(time_dir, exist_ok=True)

for t in time_stamps:
    # Select time-dependent parameters (modify bounds as needed)
    problem_time = problem.copy()
    problem_time['bounds'] = [[9.0+t/1000, 11.0-t/1000],  # Example time-varying bounds
                            [267.0+t, 273.0+t],
                            [0.08, 0.12]]
    
    param_values_t = sample.saltelli(problem_time, n//2, calc_second_order=False)
    
    # Run simulations for this timestep
    outputs_t = []
    for params in param_values_t:
        sim_res = wf_model(x, y, ws=params[0], wd=params[1], TI=params[2])
        flow_map = sim_res.flow_map(grid=grid)
        outputs_t.append(flow_map.WS_eff.values.flatten())
    
    # Analyze and plot
    Si_t = analyze.sobol(problem_time, np.array(outputs_t), calc_second_order=False)
    
    for var_idx, var_name in enumerate(problem['names']):
        S1_t = Si_t['S1'][:, var_idx].reshape(output_shape)
        
        plt.figure()
        plt.contourf(grid.X, grid.Y, S1_t, levels=15, cmap='viridis')
        plt.colorbar()
        plt.title(f'Sobol Sensitivity at t={t} - {var_name}')
        plt.savefig(f'{time_dir}/t{t}_{var_name}.png')
        plt.close()

print(f"Sensitivity maps saved to {output_dir}")
```

### Key Features:
1. **Uncertainty Quantification**: Analyzes sensitivity of WS_eff to wind speed (ws), direction (wd), and turbulence intensity (TI).
2. **Sobol Indices**: Computes first-order sensitivity indices using the SALib library.
3. **Flow Visualization**: Generates contour maps showing spatial sensitivity patterns.
4. **Time Series Analysis**: Demonstrates time-dependent sensitivity at multiple timesteps.
5. **Parallelization**: Uses PyWake's built-in parallelization via `n_cpu` (add `n_cpu=8` to `wf_model` calls for parallel execution).

### Usage:
1. Install requirements: `pip install py_wake SALib matplotlib`
2. Adjust `n` (sample count) based on available computational resources.
3. Modify uncertainty bounds in the `problem` dictionary to match your measurement uncertainties.
4. The script outputs sensitivity maps in PNG format, showing how each parameter contributes to WS_eff variability across the wind farm.

This provides a systematic approach to quantify how measurement uncertainties propagate through wake effects in wind farm simulations.
