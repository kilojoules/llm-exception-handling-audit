(niwe) /work/users/juqu/ocdtuct_repo $ python monitor.py --h5_file layouts.h5

================================================================================
Progress Summary for: layouts.h5
File size: 1.26 MB
Total configurations completed: 482
Expected configurations: 3000
Overall progress: 16.1%
================================================================================

+--------+--------+-------------+
|   Farm |   Type |   Completed |
+========+========+=============+
|      0 |      0 |          10 |
+--------+--------+-------------+
|      0 |      1 |          10 |
+--------+--------+-------------+
|      0 |      2 |          15 |
+--------+--------+-------------+
|      0 |      3 |          10 |
+--------+--------+-------------+
|      0 |      4 |          14 |
+--------+--------+-------------+
|      0 |      5 |          18 |
+--------+--------+-------------+
|      1 |      1 |          10 |
+--------+--------+-------------+
|      1 |      2 |          10 |
+--------+--------+-------------+
|      1 |      4 |           5 |
+--------+--------+-------------+
|      1 |      5 |          15 |
+--------+--------+-------------+
|      2 |      0 |           5 |
+--------+--------+-------------+
|      2 |      2 |          15 |
+--------+--------+-------------+
|      2 |      3 |           5 |
+--------+--------+-------------+
|      2 |      5 |          10 |
+--------+--------+-------------+
|      3 |      0 |          10 |
+--------+--------+-------------+
|      3 |      2 |          10 |
+--------+--------+-------------+
|      3 |      3 |          10 |
+--------+--------+-------------+
|      3 |      5 |          10 |
+--------+--------+-------------+
|      4 |      0 |           5 |
+--------+--------+-------------+
|      4 |      1 |          10 |
+--------+--------+-------------+
|      4 |      2 |           5 |
+--------+--------+-------------+
|      4 |      3 |          10 |
+--------+--------+-------------+
|      4 |      4 |          10 |
+--------+--------+-------------+
|      4 |      5 |          10 |
+--------+--------+-------------+
|      5 |      0 |           5 |
+--------+--------+-------------+
|      5 |      1 |          10 |
+--------+--------+-------------+
|      5 |      2 |          15 |
+--------+--------+-------------+
|      5 |      3 |           5 |
+--------+--------+-------------+
|      5 |      4 |          10 |
+--------+--------+-------------+
|      5 |      5 |          10 |
+--------+--------+-------------+
|      6 |      0 |          10 |
+--------+--------+-------------+
|      6 |      1 |           5 |
+--------+--------+-------------+
|      6 |      2 |          10 |
+--------+--------+-------------+
|      6 |      3 |          10 |
+--------+--------+-------------+
|      6 |      5 |          20 |
+--------+--------+-------------+
|      7 |      0 |           5 |
+--------+--------+-------------+
|      7 |      2 |          20 |
+--------+--------+-------------+
|      7 |      3 |           5 |
+--------+--------+-------------+
|      7 |      5 |          20 |
+--------+--------+-------------+
|      8 |      0 |           5 |
+--------+--------+-------------+
|      8 |      1 |           5 |
+--------+--------+-------------+
|      8 |      2 |          10 |
+--------+--------+-------------+
|      8 |      3 |          15 |
+--------+--------+-------------+
|      8 |      5 |          10 |
+--------+--------+-------------+
|      9 |      0 |          10 |
+--------+--------+-------------+
|      9 |      2 |          10 |
+--------+--------+-------------+
|      9 |      3 |          10 |
+--------+--------+-------------+
|      9 |      5 |           5 |
+--------+--------+-------------+
(niwe) /work/users/juqu/ocdtuct_repo $ cat monitor.py 
#!/usr/bin/env python
"""
Improved H5 Progress Monitor for Wind Farm Layout Optimization

This script safely reads an HDF5 file while it's being written by the optimization process
and reports progress, with an option to focus on specific seed numbers.
"""

import h5py
import argparse
import numpy as np
import os
import time
import sys
from collections import defaultdict
from tabulate import tabulate  # pip install tabulate

def examine_file_structure(h5_file):
    """
    Examine the structure of the HDF5 file to understand its contents
    
    Args:
        h5_file: Path to HDF5 file
    """
    if not os.path.exists(h5_file):
        print(f"File {h5_file} does not exist yet.")
        return
    
    try:
        with h5py.File(h5_file, 'r', swmr=True) as f:
            print("\nFile Structure:")
            print("---------------")
            
            # Print attributes
            print("Attributes:")
            for key, value in f.attrs.items():
                print(f"  {key}: {value}")
            
            # Print top-level groups and datasets
            print("\nGroups/Datasets:")
            for key in f.keys():
                if isinstance(f[key], h5py.Group):
                    print(f"  Group: {key}")
                    # Sample the first group to understand its structure
                    if key not in ('init'):
                        print("    Subgroups/Datasets:")
                        for subkey in f[key].keys():
                            print(f"      {subkey}: {f[key][subkey].shape}")
                        print("    Attributes:")
                        for attr_name, attr_value in f[key].attrs.items():
                            print(f"      {attr_name}: {attr_value}")
                else:
                    print(f"  Dataset: {key} (shape: {f[key].shape})")
            
            # Count total groups (excluding 'init')
            group_count = sum(1 for k in f.keys() if isinstance(f[k], h5py.Group) and k != 'init')
            print(f"\nTotal groups (potential configurations): {group_count}")
            
    except Exception as e:
        print(f"Error examining file: {e}", file=sys.stderr)


def count_configs_by_parameters(h5_file, count_by=None):
    """
    Count completed configurations by specified parameter(s)
    
    Args:
        h5_file: Path to HDF5 file
        count_by: List of parameters to count by (e.g., ['farm_idx', 'type_idx'])
        
    Returns:
        Dictionary with counts by parameter combinations
    """
    if count_by is None:
        count_by = ['farm_idx', 'type_idx', 'ss_seed']
        
    # Use defaultdict to avoid key errors
    counts = defaultdict(int)
    total_complete = 0
    
    try:
        with h5py.File(h5_file, 'r', swmr=True) as f:
            # Skip top-level attributes and only process groups
            for key in f.keys():
                if isinstance(f[key], h5py.Group) and key != 'init':
                    # Check if this configuration has layout data
                    has_layout = 'layout' in f[key]
                    has_aep = 'aep' in f[key]
                    
                    if not (has_layout and has_aep):
                        print(f"Group {key} is incomplete: layout={has_layout}, aep={has_aep}")
                        continue
                        
                    # Extract the desired parameters
                    param_values = []
                    missing_params = False
                    
                    for param in count_by:
                        if param in f[key].attrs:
                            param_values.append(f[key].attrs[param])
                        else:
                            # Try to extract from the key name if it's in the format farmX_tY_sZ
                            if param == 'farm_idx' and key.startswith('farm'):
                                try:
                                    farm_idx = int(key.split('_')[0].replace('farm', ''))
                                    param_values.append(farm_idx)
                                except:
                                    param_values.append('unknown')
                                    missing_params = True
                            elif param == 'type_idx' and '_t' in key:
                                try:
                                    type_idx = int(key.split('_t')[1].split('_')[0])
                                    param_values.append(type_idx)
                                except:
                                    param_values.append('unknown')
                                    missing_params = True
                            elif param == 'ss_seed' and '_s' in key:
                                try:
                                    ss_seed = int(key.split('_s')[1])
                                    param_values.append(ss_seed)
                                except:
                                    param_values.append('unknown')
                                    missing_params = True
                            else:
                                param_values.append('unknown')
                                missing_params = True
                    
                    if missing_params:
                        print(f"Warning: Missing parameters for group {key}")
                    
                    # Count this configuration
                    counts[tuple(param_values)] += 1
                    total_complete += 1
    except Exception as e:
        print(f"Error reading file: {e}", file=sys.stderr)
    
    return counts, total_complete


def get_expected_config_count(h5_file, default_seeds=8):
    """Calculate expected number of configurations from file or using defaults"""
    try:
        with h5py.File(h5_file, 'r', swmr=True) as f:
            # Try to get from file attributes first
            if 'total_configs' in f.attrs:
                return f.attrs['total_configs']
            
            # Try to count by unique seed values
            if len(f.keys()) > 0:
                seeds = set()
                farms = set()
                types = set()
                
                for key in f.keys():
                    if isinstance(f[key], h5py.Group) and key != 'init':
                        # Try from attributes
                        if 'ss_seed' in f[key].attrs:
                            seeds.add(f[key].attrs['ss_seed'])
                        if 'farm_idx' in f[key].attrs:
                            farms.add(f[key].attrs['farm_idx'])
                        if 'type_idx' in f[key].attrs:
                            types.add(f[key].attrs['type_idx'])
                        
                        # Try from key name format farmX_tY_sZ
                        if '_s' in key:
                            try:
                                seed = int(key.split('_s')[1])
                                seeds.add(seed)
                            except:
                                pass
                
                if seeds:
                    max_seed = max(seeds) + 1  # +1 because seed starts at 0
                    if farms and types:
                        return max_seed * len(farms) * len(types)
                    else:
                        return max_seed * 10 * 6  # Assume 10 farms, 6 types
    except Exception as e:
        print(f"Error determining expected count: {e}", file=sys.stderr)
    
    # Default: 10 farms, 6 types, default_seeds
    return default_seeds * 10 * 6


def print_progress_summary(h5_file, seed=None, update_interval=5, verbose=False):
    """
    Print a summary of optimization progress
    
    Args:
        h5_file: Path to HDF5 file
        seed: Optional specific seed to track
        update_interval: Seconds between updates in continuous mode
        verbose: Whether to print detailed file structure
    """
    if not os.path.exists(h5_file):
        print(f"File {h5_file} does not exist yet.")
        return False
    
    try:
        # Get file stats
        file_size = os.path.getsize(h5_file) / (1024 * 1024)  # Convert to MB
        
        # Print detailed file structure if requested
        if verbose:
            examine_file_structure(h5_file)
        
        # Count configurations by parameters
        counts_by_farm_type, total_complete = count_configs_by_parameters(h5_file, ['farm_idx', 'type_idx'])
        
        # Get expected count
        expected_configs = get_expected_config_count(h5_file)
        progress_pct = (total_complete / expected_configs) * 100 if expected_configs else 0
        
        # If tracking a specific seed, get those counts
        seed_counts = None
        if seed is not None:
            seed_counts, seed_complete = count_configs_by_parameters(h5_file, ['ss_seed', 'farm_idx', 'type_idx'])
            seed_counts = {k: v for k, v in seed_counts.items() if k[0] == seed}
        
        # Print summary
        print("\n" + "="*80)
        print(f"Progress Summary for: {h5_file}")
        print(f"File size: {file_size:.2f} MB")
        print(f"Total configurations completed: {total_complete}")
        print(f"Expected configurations: {expected_configs}")
        print(f"Overall progress: {progress_pct:.1f}%")
        print("="*80 + "\n")
        
        # Print farm/type breakdown
        headers = ["Farm", "Type", "Completed"]
        table_data = []
        
        # Format data for tabulate
        for (farm, type_idx), count in sorted(counts_by_farm_type.items()):
            if farm != 'unknown' and type_idx != 'unknown':
                table_data.append([int(farm), int(type_idx), count])
            else:
                table_data.append([farm, type_idx, count])
        
        print(tabulate(table_data, headers=headers, tablefmt="grid"))
        
        # Print seed-specific info if requested
        if seed is not None and seed_counts:
            print(f"\nProgress for seed {seed}:")
            headers = ["Seed", "Farm", "Type", "Completed"]
            seed_table = []
            
            for (s, farm, type_idx), count in sorted(seed_counts.items()):
                if s != 'unknown' and farm != 'unknown' and type_idx != 'unknown':
                    seed_table.append([int(s), int(farm), int(type_idx), count])
                else:
                    seed_table.append([s, farm, type_idx, count])
            
            print(tabulate(seed_table, headers=headers, tablefmt="grid"))
            
            # Calculate seed completion percentage
            expected_seed_configs = 10 * 6  # 10 farms, 6 types
            seed_total = sum(count for k, count in seed_counts.items())
            seed_pct = (seed_total / expected_seed_configs) * 100
            print(f"Seed {seed} progress: {seed_pct:.1f}% ({seed_total}/{expected_seed_configs})")
        
        return True
    
    except Exception as e:
        print(f"Error analyzing file: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        return False


def monitor_progress(h5_file, seed=None, update_interval=5, continuous=False, verbose=False):
    """
    Monitor progress of the optimization
    
    Args:
        h5_file: Path to HDF5 file
        seed: Optional specific seed to track
        update_interval: Seconds between updates in continuous mode
        continuous: Whether to continuously monitor
        verbose: Whether to print detailed file structure
    """
    if continuous:
        try:
            while True:
                success = print_progress_summary(h5_file, seed, update_interval, verbose)
                if not success and not os.path.exists(h5_file):
                    print(f"Waiting for file {h5_file} to be created...")
                time.sleep(update_interval)
                # Clear screen in terminal (works on most platforms)
                os.system('cls' if os.name == 'nt' else 'clear')
        except KeyboardInterrupt:
            print("\nMonitoring stopped by user.")
    else:
        print_progress_summary(h5_file, seed, update_interval, verbose)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Monitor progress of wind farm layout optimization")
    parser.add_argument("--h5_file", help="Path to HDF5 file")
    parser.add_argument("--seed", "-s", type=int, help="Focus on a specific seed number")
    parser.add_argument("--continuous", "-c", action="store_true", help="Continuously monitor progress")
    parser.add_argument("--interval", "-i", type=int, default=5, help="Update interval in seconds (default: 5)")
    parser.add_argument("--verbose", "-v", action="store_true", help="Print detailed file structure")
    args = parser.parse_args()
    
    monitor_progress(args.h5_file, args.seed, args.interval, args.continuous, args.verbose)
